/* automatically generated by rust-bindgen 0.71.1 */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _CRT_INTERNAL_STDIO_SYMBOL_PREFIX: &[u8; 1] = b"\0";
pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION: u32 = 1;
pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR: u32 = 2;
pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS: u32 = 4;
pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 8;
pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS: u32 = 16;
pub const _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING: u32 = 32;
pub const _CRT_INTERNAL_SCANF_SECURECRT: u32 = 1;
pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS: u32 = 2;
pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 4;
pub const BUFSIZ: u32 = 512;
pub const _NSTREAM_: u32 = 512;
pub const _IOB_ENTRIES: u32 = 3;
pub const EOF: i32 = -1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 64;
pub const _IONBF: u32 = 4;
pub const L_tmpnam: u32 = 260;
pub const L_tmpnam_s: u32 = 260;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_SET: u32 = 0;
pub const FILENAME_MAX: u32 = 260;
pub const FOPEN_MAX: u32 = 20;
pub const _SYS_OPEN: u32 = 20;
pub const TMP_MAX: u32 = 2147483647;
pub const TMP_MAX_S: u32 = 2147483647;
pub const _TMP_MAX_S: u32 = 2147483647;
pub const SYS_OPEN: u32 = 20;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const MQTT_INVALID_PROPERTY_ID: i32 = -2;
pub const MQTTCLIENT_PERSISTENCE_DEFAULT: u32 = 0;
pub const MQTTCLIENT_PERSISTENCE_NONE: u32 = 1;
pub const MQTTCLIENT_PERSISTENCE_USER: u32 = 2;
pub const MQTTCLIENT_PERSISTENCE_ERROR: i32 = -2;
pub const MQTTASYNC_SUCCESS: u32 = 0;
pub const MQTTASYNC_FAILURE: i32 = -1;
pub const MQTTASYNC_PERSISTENCE_ERROR: i32 = -2;
pub const MQTTASYNC_DISCONNECTED: i32 = -3;
pub const MQTTASYNC_MAX_MESSAGES_INFLIGHT: i32 = -4;
pub const MQTTASYNC_BAD_UTF8_STRING: i32 = -5;
pub const MQTTASYNC_NULL_PARAMETER: i32 = -6;
pub const MQTTASYNC_TOPICNAME_TRUNCATED: i32 = -7;
pub const MQTTASYNC_BAD_STRUCTURE: i32 = -8;
pub const MQTTASYNC_BAD_QOS: i32 = -9;
pub const MQTTASYNC_NO_MORE_MSGIDS: i32 = -10;
pub const MQTTASYNC_OPERATION_INCOMPLETE: i32 = -11;
pub const MQTTASYNC_MAX_BUFFERED_MESSAGES: i32 = -12;
pub const MQTTASYNC_SSL_NOT_SUPPORTED: i32 = -13;
pub const MQTTASYNC_BAD_PROTOCOL: i32 = -14;
pub const MQTTASYNC_BAD_MQTT_OPTION: i32 = -15;
pub const MQTTASYNC_WRONG_MQTT_VERSION: i32 = -16;
pub const MQTTASYNC_0_LEN_WILL_TOPIC: i32 = -17;
pub const MQTTASYNC_COMMAND_IGNORED: i32 = -18;
pub const MQTTASYNC_MAX_BUFFERED: i32 = -19;
pub const MQTTVERSION_DEFAULT: u32 = 0;
pub const MQTTVERSION_3_1: u32 = 3;
pub const MQTTVERSION_3_1_1: u32 = 4;
pub const MQTTVERSION_5: u32 = 5;
pub const MQTT_BAD_SUBSCRIBE: u32 = 128;
pub const MQTT_SSL_VERSION_DEFAULT: u32 = 0;
pub const MQTT_SSL_VERSION_TLS_1_0: u32 = 1;
pub const MQTT_SSL_VERSION_TLS_1_1: u32 = 2;
pub const MQTT_SSL_VERSION_TLS_1_2: u32 = 3;
pub const MQTTASYNC_TRUE: u32 = 1;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn() -> !;
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    ) -> !;
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    const UNINIT: ::std::mem::MaybeUninit<__crt_locale_data_public> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        "Size of __crt_locale_data_public"
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        "Alignment of __crt_locale_data_public"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_pctype) as usize - ptr as usize },
        0usize,
        "Offset of field: __crt_locale_data_public::_locale_pctype"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_mb_cur_max) as usize - ptr as usize },
        8usize,
        "Offset of field: __crt_locale_data_public::_locale_mb_cur_max"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_lc_codepage) as usize - ptr as usize },
        12usize,
        "Offset of field: __crt_locale_data_public::_locale_lc_codepage"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    const UNINIT: ::std::mem::MaybeUninit<__crt_locale_pointers> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        "Size of __crt_locale_pointers"
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        "Alignment of __crt_locale_pointers"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locinfo) as usize - ptr as usize },
        0usize,
        "Offset of field: __crt_locale_pointers::locinfo"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mbcinfo) as usize - ptr as usize },
        8usize,
        "Offset of field: __crt_locale_pointers::mbcinfo"
    );
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    const UNINIT: ::std::mem::MaybeUninit<_Mbstatet> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        "Size of _Mbstatet"
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        "Alignment of _Mbstatet"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Wchar) as usize - ptr as usize },
        0usize,
        "Offset of field: _Mbstatet::_Wchar"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Byte) as usize - ptr as usize },
        4usize,
        "Offset of field: _Mbstatet::_Byte"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._State) as usize - ptr as usize },
        6usize,
        "Offset of field: _Mbstatet::_State"
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
    pub _Placeholder: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__iobuf() {
    const UNINIT: ::std::mem::MaybeUninit<_iobuf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<_iobuf>(), 8usize, "Size of _iobuf");
    assert_eq!(
        ::std::mem::align_of::<_iobuf>(),
        8usize,
        "Alignment of _iobuf"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Placeholder) as usize - ptr as usize },
        0usize,
        "Offset of field: _iobuf::_Placeholder"
    );
}
pub type FILE = _iobuf;
extern "C" {
    pub fn __acrt_iob_func(_Ix: ::std::os::raw::c_uint) -> *mut FILE;
}
extern "C" {
    pub fn fgetwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fgetwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn getwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fgetws(
        _Buffer: *mut wchar_t,
        _BufferCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn fputws(_Buffer: *const wchar_t, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getws_s(_Buffer: *mut wchar_t, _BufferCount: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn putwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn _putws(_Buffer: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _wfdopen(_FileHandle: ::std::os::raw::c_int, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen(_FileName: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfreopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wfreopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfsopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wperror(_ErrorMessage: *const wchar_t);
}
extern "C" {
    pub fn _wpopen(_Command: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wremove(_FileName: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtempnam(_Directory: *const wchar_t, _FilePrefix: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtmpnam_s(_Buffer: *mut wchar_t, _BufferCount: usize) -> errno_t;
}
extern "C" {
    pub fn _wtmpnam(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _fgetwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _getwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _putwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _ungetwc_nolock(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn __stdio_common_vfwprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _MaxCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = ::std::os::raw::c_longlong;
extern "C" {
    pub fn _get_stream_buffer_pointers(
        _Stream: *mut FILE,
        _Base: *mut *mut *mut ::std::os::raw::c_char,
        _Pointer: *mut *mut *mut ::std::os::raw::c_char,
        _Count: *mut *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn clearerr_s(_Stream: *mut FILE) -> errno_t;
}
extern "C" {
    pub fn fopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn fread_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: usize,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn freopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn gets_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _Size: rsize_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile_s(_Stream: *mut *mut FILE) -> errno_t;
}
extern "C" {
    pub fn tmpnam_s(_Buffer: *mut ::std::os::raw::c_char, _Size: rsize_t) -> errno_t;
}
extern "C" {
    pub fn clearerr(_Stream: *mut FILE);
}
extern "C" {
    pub fn fclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn feof(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(_Stream: *mut FILE, _Position: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        _Buffer: *mut ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fputc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(
        _Buffer: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn freopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _fsopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fsetpos(_Stream: *mut FILE, _Position: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fwrite(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn getc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getmaxstdio() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(_ErrorMessage: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn _pclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _popen(
        _Command: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn putc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(_Buffer: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putw(_Word: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        _OldFileName: *const ::std::os::raw::c_char,
        _NewFileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(_Stream: *mut FILE);
}
extern "C" {
    pub fn _rmtmp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(_Stream: *mut FILE, _Buffer: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn _setmaxstdio(_Maximum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setvbuf(
        _Stream: *mut FILE,
        _Buffer: *mut ::std::os::raw::c_char,
        _Mode: ::std::os::raw::c_int,
        _Size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tempnam(
        _DirectoryName: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _lock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _unlock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _fclose_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fflush_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fread_nolock(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn _fread_nolock_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: usize,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn _fseek_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ftell_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _fwrite_nolock(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn _getc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ungetc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p__commode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_printf_count_output(_Value: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_printf_count_output() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _Arglist: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _MaxCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        _Directory: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Format: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputchar(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(_Ch: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmtmp() -> ::std::os::raw::c_int;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_PAYLOAD_FORMAT_INDICATOR: MQTTPropertyCodes = 1;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_MESSAGE_EXPIRY_INTERVAL: MQTTPropertyCodes = 2;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_CONTENT_TYPE: MQTTPropertyCodes = 3;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_RESPONSE_TOPIC: MQTTPropertyCodes = 8;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_CORRELATION_DATA: MQTTPropertyCodes = 9;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_SUBSCRIPTION_IDENTIFIER: MQTTPropertyCodes = 11;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_SESSION_EXPIRY_INTERVAL: MQTTPropertyCodes = 17;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_ASSIGNED_CLIENT_IDENTIFIER: MQTTPropertyCodes = 18;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_ASSIGNED_CLIENT_IDENTIFER: MQTTPropertyCodes = 18;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_SERVER_KEEP_ALIVE: MQTTPropertyCodes = 19;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_AUTHENTICATION_METHOD: MQTTPropertyCodes = 21;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_AUTHENTICATION_DATA: MQTTPropertyCodes = 22;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_REQUEST_PROBLEM_INFORMATION: MQTTPropertyCodes = 23;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_WILL_DELAY_INTERVAL: MQTTPropertyCodes = 24;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_REQUEST_RESPONSE_INFORMATION: MQTTPropertyCodes = 25;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_RESPONSE_INFORMATION: MQTTPropertyCodes = 26;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_SERVER_REFERENCE: MQTTPropertyCodes = 28;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_REASON_STRING: MQTTPropertyCodes = 31;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_RECEIVE_MAXIMUM: MQTTPropertyCodes = 33;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_TOPIC_ALIAS_MAXIMUM: MQTTPropertyCodes = 34;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_TOPIC_ALIAS: MQTTPropertyCodes = 35;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_MAXIMUM_QOS: MQTTPropertyCodes = 36;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_RETAIN_AVAILABLE: MQTTPropertyCodes = 37;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_USER_PROPERTY: MQTTPropertyCodes = 38;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_MAXIMUM_PACKET_SIZE: MQTTPropertyCodes = 39;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_WILDCARD_SUBSCRIPTION_AVAILABLE: MQTTPropertyCodes =
    40;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_SUBSCRIPTION_IDENTIFIERS_AVAILABLE:
    MQTTPropertyCodes = 41;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_SHARED_SUBSCRIPTION_AVAILABLE: MQTTPropertyCodes = 42;
pub type MQTTPropertyCodes = ::std::os::raw::c_int;
extern "C" {
    pub fn MQTTPropertyName(value: MQTTPropertyCodes) -> *const ::std::os::raw::c_char;
}
pub const MQTTPropertyTypes_MQTTPROPERTY_TYPE_BYTE: MQTTPropertyTypes = 0;
pub const MQTTPropertyTypes_MQTTPROPERTY_TYPE_TWO_BYTE_INTEGER: MQTTPropertyTypes = 1;
pub const MQTTPropertyTypes_MQTTPROPERTY_TYPE_FOUR_BYTE_INTEGER: MQTTPropertyTypes = 2;
pub const MQTTPropertyTypes_MQTTPROPERTY_TYPE_VARIABLE_BYTE_INTEGER: MQTTPropertyTypes = 3;
pub const MQTTPropertyTypes_MQTTPROPERTY_TYPE_BINARY_DATA: MQTTPropertyTypes = 4;
pub const MQTTPropertyTypes_MQTTPROPERTY_TYPE_UTF_8_ENCODED_STRING: MQTTPropertyTypes = 5;
pub const MQTTPropertyTypes_MQTTPROPERTY_TYPE_UTF_8_STRING_PAIR: MQTTPropertyTypes = 6;
pub type MQTTPropertyTypes = ::std::os::raw::c_int;
extern "C" {
    pub fn MQTTProperty_getType(value: MQTTPropertyCodes) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTLenString {
    pub len: ::std::os::raw::c_int,
    pub data: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_MQTTLenString() {
    const UNINIT: ::std::mem::MaybeUninit<MQTTLenString> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MQTTLenString>(),
        16usize,
        "Size of MQTTLenString"
    );
    assert_eq!(
        ::std::mem::align_of::<MQTTLenString>(),
        8usize,
        "Alignment of MQTTLenString"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTLenString::len"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        "Offset of field: MQTTLenString::data"
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MQTTProperty {
    pub identifier: MQTTPropertyCodes,
    pub value: MQTTProperty__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MQTTProperty__bindgen_ty_1 {
    pub byte: ::std::os::raw::c_uchar,
    pub integer2: ::std::os::raw::c_ushort,
    pub integer4: ::std::os::raw::c_uint,
    pub __bindgen_anon_1: MQTTProperty__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTProperty__bindgen_ty_1__bindgen_ty_1 {
    pub data: MQTTLenString,
    pub value: MQTTLenString,
}
#[test]
fn bindgen_test_layout_MQTTProperty__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<MQTTProperty__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MQTTProperty__bindgen_ty_1__bindgen_ty_1>(),
        32usize,
        "Size of MQTTProperty__bindgen_ty_1__bindgen_ty_1"
    );
    assert_eq!(
        ::std::mem::align_of::<MQTTProperty__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        "Alignment of MQTTProperty__bindgen_ty_1__bindgen_ty_1"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTProperty__bindgen_ty_1__bindgen_ty_1::data"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        "Offset of field: MQTTProperty__bindgen_ty_1__bindgen_ty_1::value"
    );
}
#[test]
fn bindgen_test_layout_MQTTProperty__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<MQTTProperty__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MQTTProperty__bindgen_ty_1>(),
        32usize,
        "Size of MQTTProperty__bindgen_ty_1"
    );
    assert_eq!(
        ::std::mem::align_of::<MQTTProperty__bindgen_ty_1>(),
        8usize,
        "Alignment of MQTTProperty__bindgen_ty_1"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTProperty__bindgen_ty_1::byte"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).integer2) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTProperty__bindgen_ty_1::integer2"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).integer4) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTProperty__bindgen_ty_1::integer4"
    );
}
#[test]
fn bindgen_test_layout_MQTTProperty() {
    const UNINIT: ::std::mem::MaybeUninit<MQTTProperty> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MQTTProperty>(),
        40usize,
        "Size of MQTTProperty"
    );
    assert_eq!(
        ::std::mem::align_of::<MQTTProperty>(),
        8usize,
        "Alignment of MQTTProperty"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identifier) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTProperty::identifier"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        "Offset of field: MQTTProperty::value"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTProperties {
    pub count: ::std::os::raw::c_int,
    pub max_count: ::std::os::raw::c_int,
    pub length: ::std::os::raw::c_int,
    pub array: *mut MQTTProperty,
}
#[test]
fn bindgen_test_layout_MQTTProperties() {
    const UNINIT: ::std::mem::MaybeUninit<MQTTProperties> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MQTTProperties>(),
        24usize,
        "Size of MQTTProperties"
    );
    assert_eq!(
        ::std::mem::align_of::<MQTTProperties>(),
        8usize,
        "Alignment of MQTTProperties"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTProperties::count"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_count) as usize - ptr as usize },
        4usize,
        "Offset of field: MQTTProperties::max_count"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        "Offset of field: MQTTProperties::length"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array) as usize - ptr as usize },
        16usize,
        "Offset of field: MQTTProperties::array"
    );
}
extern "C" {
    pub fn MQTTProperties_len(props: *const MQTTProperties) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MQTTProperties_add(
        props: *mut MQTTProperties,
        prop: *const MQTTProperty,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MQTTProperties_write(
        pptr: *mut *mut ::std::os::raw::c_char,
        properties: *const MQTTProperties,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MQTTProperties_read(
        properties: *mut MQTTProperties,
        pptr: *mut *mut ::std::os::raw::c_char,
        enddata: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MQTTProperties_free(properties: *mut MQTTProperties);
}
extern "C" {
    pub fn MQTTProperties_copy(props: *const MQTTProperties) -> MQTTProperties;
}
extern "C" {
    pub fn MQTTProperties_hasProperty(
        props: *const MQTTProperties,
        propid: MQTTPropertyCodes,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MQTTProperties_propertyCount(
        props: *const MQTTProperties,
        propid: MQTTPropertyCodes,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MQTTProperties_getNumericValue(
        props: *const MQTTProperties,
        propid: MQTTPropertyCodes,
    ) -> i64;
}
extern "C" {
    pub fn MQTTProperties_getNumericValueAt(
        props: *const MQTTProperties,
        propid: MQTTPropertyCodes,
        index: ::std::os::raw::c_int,
    ) -> i64;
}
extern "C" {
    pub fn MQTTProperties_getProperty(
        props: *const MQTTProperties,
        propid: MQTTPropertyCodes,
    ) -> *mut MQTTProperty;
}
extern "C" {
    pub fn MQTTProperties_getPropertyAt(
        props: *const MQTTProperties,
        propid: MQTTPropertyCodes,
        index: ::std::os::raw::c_int,
    ) -> *mut MQTTProperty;
}
pub const MQTTReasonCodes_MQTTREASONCODE_SUCCESS: MQTTReasonCodes = 0;
pub const MQTTReasonCodes_MQTTREASONCODE_NORMAL_DISCONNECTION: MQTTReasonCodes = 0;
pub const MQTTReasonCodes_MQTTREASONCODE_GRANTED_QOS_0: MQTTReasonCodes = 0;
pub const MQTTReasonCodes_MQTTREASONCODE_GRANTED_QOS_1: MQTTReasonCodes = 1;
pub const MQTTReasonCodes_MQTTREASONCODE_GRANTED_QOS_2: MQTTReasonCodes = 2;
pub const MQTTReasonCodes_MQTTREASONCODE_DISCONNECT_WITH_WILL_MESSAGE: MQTTReasonCodes = 4;
pub const MQTTReasonCodes_MQTTREASONCODE_NO_MATCHING_SUBSCRIBERS: MQTTReasonCodes = 16;
pub const MQTTReasonCodes_MQTTREASONCODE_NO_SUBSCRIPTION_FOUND: MQTTReasonCodes = 17;
pub const MQTTReasonCodes_MQTTREASONCODE_CONTINUE_AUTHENTICATION: MQTTReasonCodes = 24;
pub const MQTTReasonCodes_MQTTREASONCODE_RE_AUTHENTICATE: MQTTReasonCodes = 25;
pub const MQTTReasonCodes_MQTTREASONCODE_UNSPECIFIED_ERROR: MQTTReasonCodes = 128;
pub const MQTTReasonCodes_MQTTREASONCODE_MALFORMED_PACKET: MQTTReasonCodes = 129;
pub const MQTTReasonCodes_MQTTREASONCODE_PROTOCOL_ERROR: MQTTReasonCodes = 130;
pub const MQTTReasonCodes_MQTTREASONCODE_IMPLEMENTATION_SPECIFIC_ERROR: MQTTReasonCodes = 131;
pub const MQTTReasonCodes_MQTTREASONCODE_UNSUPPORTED_PROTOCOL_VERSION: MQTTReasonCodes = 132;
pub const MQTTReasonCodes_MQTTREASONCODE_CLIENT_IDENTIFIER_NOT_VALID: MQTTReasonCodes = 133;
pub const MQTTReasonCodes_MQTTREASONCODE_BAD_USER_NAME_OR_PASSWORD: MQTTReasonCodes = 134;
pub const MQTTReasonCodes_MQTTREASONCODE_NOT_AUTHORIZED: MQTTReasonCodes = 135;
pub const MQTTReasonCodes_MQTTREASONCODE_SERVER_UNAVAILABLE: MQTTReasonCodes = 136;
pub const MQTTReasonCodes_MQTTREASONCODE_SERVER_BUSY: MQTTReasonCodes = 137;
pub const MQTTReasonCodes_MQTTREASONCODE_BANNED: MQTTReasonCodes = 138;
pub const MQTTReasonCodes_MQTTREASONCODE_SERVER_SHUTTING_DOWN: MQTTReasonCodes = 139;
pub const MQTTReasonCodes_MQTTREASONCODE_BAD_AUTHENTICATION_METHOD: MQTTReasonCodes = 140;
pub const MQTTReasonCodes_MQTTREASONCODE_KEEP_ALIVE_TIMEOUT: MQTTReasonCodes = 141;
pub const MQTTReasonCodes_MQTTREASONCODE_SESSION_TAKEN_OVER: MQTTReasonCodes = 142;
pub const MQTTReasonCodes_MQTTREASONCODE_TOPIC_FILTER_INVALID: MQTTReasonCodes = 143;
pub const MQTTReasonCodes_MQTTREASONCODE_TOPIC_NAME_INVALID: MQTTReasonCodes = 144;
pub const MQTTReasonCodes_MQTTREASONCODE_PACKET_IDENTIFIER_IN_USE: MQTTReasonCodes = 145;
pub const MQTTReasonCodes_MQTTREASONCODE_PACKET_IDENTIFIER_NOT_FOUND: MQTTReasonCodes = 146;
pub const MQTTReasonCodes_MQTTREASONCODE_RECEIVE_MAXIMUM_EXCEEDED: MQTTReasonCodes = 147;
pub const MQTTReasonCodes_MQTTREASONCODE_TOPIC_ALIAS_INVALID: MQTTReasonCodes = 148;
pub const MQTTReasonCodes_MQTTREASONCODE_PACKET_TOO_LARGE: MQTTReasonCodes = 149;
pub const MQTTReasonCodes_MQTTREASONCODE_MESSAGE_RATE_TOO_HIGH: MQTTReasonCodes = 150;
pub const MQTTReasonCodes_MQTTREASONCODE_QUOTA_EXCEEDED: MQTTReasonCodes = 151;
pub const MQTTReasonCodes_MQTTREASONCODE_ADMINISTRATIVE_ACTION: MQTTReasonCodes = 152;
pub const MQTTReasonCodes_MQTTREASONCODE_PAYLOAD_FORMAT_INVALID: MQTTReasonCodes = 153;
pub const MQTTReasonCodes_MQTTREASONCODE_RETAIN_NOT_SUPPORTED: MQTTReasonCodes = 154;
pub const MQTTReasonCodes_MQTTREASONCODE_QOS_NOT_SUPPORTED: MQTTReasonCodes = 155;
pub const MQTTReasonCodes_MQTTREASONCODE_USE_ANOTHER_SERVER: MQTTReasonCodes = 156;
pub const MQTTReasonCodes_MQTTREASONCODE_SERVER_MOVED: MQTTReasonCodes = 157;
pub const MQTTReasonCodes_MQTTREASONCODE_SHARED_SUBSCRIPTIONS_NOT_SUPPORTED: MQTTReasonCodes = 158;
pub const MQTTReasonCodes_MQTTREASONCODE_CONNECTION_RATE_EXCEEDED: MQTTReasonCodes = 159;
pub const MQTTReasonCodes_MQTTREASONCODE_MAXIMUM_CONNECT_TIME: MQTTReasonCodes = 160;
pub const MQTTReasonCodes_MQTTREASONCODE_SUBSCRIPTION_IDENTIFIERS_NOT_SUPPORTED: MQTTReasonCodes =
    161;
pub const MQTTReasonCodes_MQTTREASONCODE_WILDCARD_SUBSCRIPTIONS_NOT_SUPPORTED: MQTTReasonCodes =
    162;
pub type MQTTReasonCodes = ::std::os::raw::c_int;
extern "C" {
    pub fn MQTTReasonCode_toString(value: MQTTReasonCodes) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTSubscribe_options {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub noLocal: ::std::os::raw::c_uchar,
    pub retainAsPublished: ::std::os::raw::c_uchar,
    pub retainHandling: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_MQTTSubscribe_options() {
    const UNINIT: ::std::mem::MaybeUninit<MQTTSubscribe_options> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MQTTSubscribe_options>(),
        12usize,
        "Size of MQTTSubscribe_options"
    );
    assert_eq!(
        ::std::mem::align_of::<MQTTSubscribe_options>(),
        4usize,
        "Alignment of MQTTSubscribe_options"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).struct_id) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTSubscribe_options::struct_id"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).struct_version) as usize - ptr as usize },
        4usize,
        "Offset of field: MQTTSubscribe_options::struct_version"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noLocal) as usize - ptr as usize },
        8usize,
        "Offset of field: MQTTSubscribe_options::noLocal"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retainAsPublished) as usize - ptr as usize },
        9usize,
        "Offset of field: MQTTSubscribe_options::retainAsPublished"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retainHandling) as usize - ptr as usize },
        10usize,
        "Offset of field: MQTTSubscribe_options::retainHandling"
    );
}
pub type Persistence_open = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut *mut ::std::os::raw::c_void,
        clientID: *const ::std::os::raw::c_char,
        serverURI: *const ::std::os::raw::c_char,
        context: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type Persistence_close = ::std::option::Option<
    unsafe extern "C" fn(handle: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
pub type Persistence_put = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut ::std::os::raw::c_void,
        key: *mut ::std::os::raw::c_char,
        bufcount: ::std::os::raw::c_int,
        buffers: *mut *mut ::std::os::raw::c_char,
        buflens: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type Persistence_get = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut ::std::os::raw::c_void,
        key: *mut ::std::os::raw::c_char,
        buffer: *mut *mut ::std::os::raw::c_char,
        buflen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type Persistence_remove = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut ::std::os::raw::c_void,
        key: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type Persistence_keys = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut ::std::os::raw::c_void,
        keys: *mut *mut *mut ::std::os::raw::c_char,
        nkeys: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type Persistence_clear = ::std::option::Option<
    unsafe extern "C" fn(handle: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
pub type Persistence_containskey = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut ::std::os::raw::c_void,
        key: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTClient_persistence {
    pub context: *mut ::std::os::raw::c_void,
    pub popen: Persistence_open,
    pub pclose: Persistence_close,
    pub pput: Persistence_put,
    pub pget: Persistence_get,
    pub premove: Persistence_remove,
    pub pkeys: Persistence_keys,
    pub pclear: Persistence_clear,
    pub pcontainskey: Persistence_containskey,
}
#[test]
fn bindgen_test_layout_MQTTClient_persistence() {
    const UNINIT: ::std::mem::MaybeUninit<MQTTClient_persistence> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MQTTClient_persistence>(),
        72usize,
        "Size of MQTTClient_persistence"
    );
    assert_eq!(
        ::std::mem::align_of::<MQTTClient_persistence>(),
        8usize,
        "Alignment of MQTTClient_persistence"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTClient_persistence::context"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).popen) as usize - ptr as usize },
        8usize,
        "Offset of field: MQTTClient_persistence::popen"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pclose) as usize - ptr as usize },
        16usize,
        "Offset of field: MQTTClient_persistence::pclose"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pput) as usize - ptr as usize },
        24usize,
        "Offset of field: MQTTClient_persistence::pput"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pget) as usize - ptr as usize },
        32usize,
        "Offset of field: MQTTClient_persistence::pget"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).premove) as usize - ptr as usize },
        40usize,
        "Offset of field: MQTTClient_persistence::premove"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pkeys) as usize - ptr as usize },
        48usize,
        "Offset of field: MQTTClient_persistence::pkeys"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pclear) as usize - ptr as usize },
        56usize,
        "Offset of field: MQTTClient_persistence::pclear"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pcontainskey) as usize - ptr as usize },
        64usize,
        "Offset of field: MQTTClient_persistence::pcontainskey"
    );
}
pub type MQTTPersistence_beforeWrite = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        bufcount: ::std::os::raw::c_int,
        buffers: *mut *mut ::std::os::raw::c_char,
        buflens: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type MQTTPersistence_afterRead = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        buffer: *mut *mut ::std::os::raw::c_char,
        buflen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_init_options {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub do_openssl_init: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_MQTTAsync_init_options() {
    const UNINIT: ::std::mem::MaybeUninit<MQTTAsync_init_options> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MQTTAsync_init_options>(),
        12usize,
        "Size of MQTTAsync_init_options"
    );
    assert_eq!(
        ::std::mem::align_of::<MQTTAsync_init_options>(),
        4usize,
        "Alignment of MQTTAsync_init_options"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).struct_id) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTAsync_init_options::struct_id"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).struct_version) as usize - ptr as usize },
        4usize,
        "Offset of field: MQTTAsync_init_options::struct_version"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_openssl_init) as usize - ptr as usize },
        8usize,
        "Offset of field: MQTTAsync_init_options::do_openssl_init"
    );
}
extern "C" {
    pub fn MQTTAsync_global_init(inits: *mut MQTTAsync_init_options);
}
pub type MQTTAsync = *mut ::std::os::raw::c_void;
pub type MQTTAsync_token = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_message {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub payloadlen: ::std::os::raw::c_int,
    pub payload: *mut ::std::os::raw::c_void,
    pub qos: ::std::os::raw::c_int,
    pub retained: ::std::os::raw::c_int,
    pub dup: ::std::os::raw::c_int,
    pub msgid: ::std::os::raw::c_int,
    pub properties: MQTTProperties,
}
#[test]
fn bindgen_test_layout_MQTTAsync_message() {
    const UNINIT: ::std::mem::MaybeUninit<MQTTAsync_message> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MQTTAsync_message>(),
        64usize,
        "Size of MQTTAsync_message"
    );
    assert_eq!(
        ::std::mem::align_of::<MQTTAsync_message>(),
        8usize,
        "Alignment of MQTTAsync_message"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).struct_id) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTAsync_message::struct_id"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).struct_version) as usize - ptr as usize },
        4usize,
        "Offset of field: MQTTAsync_message::struct_version"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).payloadlen) as usize - ptr as usize },
        8usize,
        "Offset of field: MQTTAsync_message::payloadlen"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).payload) as usize - ptr as usize },
        16usize,
        "Offset of field: MQTTAsync_message::payload"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qos) as usize - ptr as usize },
        24usize,
        "Offset of field: MQTTAsync_message::qos"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retained) as usize - ptr as usize },
        28usize,
        "Offset of field: MQTTAsync_message::retained"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dup) as usize - ptr as usize },
        32usize,
        "Offset of field: MQTTAsync_message::dup"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgid) as usize - ptr as usize },
        36usize,
        "Offset of field: MQTTAsync_message::msgid"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).properties) as usize - ptr as usize },
        40usize,
        "Offset of field: MQTTAsync_message::properties"
    );
}
pub type MQTTAsync_messageArrived = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        topicName: *mut ::std::os::raw::c_char,
        topicLen: ::std::os::raw::c_int,
        message: *mut MQTTAsync_message,
    ) -> ::std::os::raw::c_int,
>;
pub type MQTTAsync_deliveryComplete = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ::std::os::raw::c_void, token: MQTTAsync_token),
>;
pub type MQTTAsync_connectionLost = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ::std::os::raw::c_void, cause: *mut ::std::os::raw::c_char),
>;
pub type MQTTAsync_connected = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ::std::os::raw::c_void, cause: *mut ::std::os::raw::c_char),
>;
pub type MQTTAsync_disconnected = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        properties: *mut MQTTProperties,
        reasonCode: MQTTReasonCodes,
    ),
>;
extern "C" {
    pub fn MQTTAsync_setDisconnected(
        handle: MQTTAsync,
        context: *mut ::std::os::raw::c_void,
        co: MQTTAsync_disconnected,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_connectData {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub username: *const ::std::os::raw::c_char,
    pub binarypwd: MQTTAsync_connectData__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_connectData__bindgen_ty_1 {
    pub len: ::std::os::raw::c_int,
    pub data: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_MQTTAsync_connectData__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<MQTTAsync_connectData__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MQTTAsync_connectData__bindgen_ty_1>(),
        16usize,
        "Size of MQTTAsync_connectData__bindgen_ty_1"
    );
    assert_eq!(
        ::std::mem::align_of::<MQTTAsync_connectData__bindgen_ty_1>(),
        8usize,
        "Alignment of MQTTAsync_connectData__bindgen_ty_1"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTAsync_connectData__bindgen_ty_1::len"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        "Offset of field: MQTTAsync_connectData__bindgen_ty_1::data"
    );
}
#[test]
fn bindgen_test_layout_MQTTAsync_connectData() {
    const UNINIT: ::std::mem::MaybeUninit<MQTTAsync_connectData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MQTTAsync_connectData>(),
        32usize,
        "Size of MQTTAsync_connectData"
    );
    assert_eq!(
        ::std::mem::align_of::<MQTTAsync_connectData>(),
        8usize,
        "Alignment of MQTTAsync_connectData"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).struct_id) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTAsync_connectData::struct_id"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).struct_version) as usize - ptr as usize },
        4usize,
        "Offset of field: MQTTAsync_connectData::struct_version"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).username) as usize - ptr as usize },
        8usize,
        "Offset of field: MQTTAsync_connectData::username"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).binarypwd) as usize - ptr as usize },
        16usize,
        "Offset of field: MQTTAsync_connectData::binarypwd"
    );
}
pub type MQTTAsync_updateConnectOptions = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        data: *mut MQTTAsync_connectData,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn MQTTAsync_setUpdateConnectOptions(
        handle: MQTTAsync,
        context: *mut ::std::os::raw::c_void,
        co: MQTTAsync_updateConnectOptions,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MQTTAsync_setBeforePersistenceWrite(
        handle: MQTTAsync,
        context: *mut ::std::os::raw::c_void,
        co: MQTTPersistence_beforeWrite,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MQTTAsync_setAfterPersistenceRead(
        handle: MQTTAsync,
        context: *mut ::std::os::raw::c_void,
        co: MQTTPersistence_afterRead,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_failureData {
    pub token: MQTTAsync_token,
    pub code: ::std::os::raw::c_int,
    pub message: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_MQTTAsync_failureData() {
    const UNINIT: ::std::mem::MaybeUninit<MQTTAsync_failureData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MQTTAsync_failureData>(),
        16usize,
        "Size of MQTTAsync_failureData"
    );
    assert_eq!(
        ::std::mem::align_of::<MQTTAsync_failureData>(),
        8usize,
        "Alignment of MQTTAsync_failureData"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTAsync_failureData::token"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        4usize,
        "Offset of field: MQTTAsync_failureData::code"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        8usize,
        "Offset of field: MQTTAsync_failureData::message"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_failureData5 {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub token: MQTTAsync_token,
    pub reasonCode: MQTTReasonCodes,
    pub properties: MQTTProperties,
    pub code: ::std::os::raw::c_int,
    pub message: *const ::std::os::raw::c_char,
    pub packet_type: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_MQTTAsync_failureData5() {
    const UNINIT: ::std::mem::MaybeUninit<MQTTAsync_failureData5> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MQTTAsync_failureData5>(),
        64usize,
        "Size of MQTTAsync_failureData5"
    );
    assert_eq!(
        ::std::mem::align_of::<MQTTAsync_failureData5>(),
        8usize,
        "Alignment of MQTTAsync_failureData5"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).struct_id) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTAsync_failureData5::struct_id"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).struct_version) as usize - ptr as usize },
        4usize,
        "Offset of field: MQTTAsync_failureData5::struct_version"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        8usize,
        "Offset of field: MQTTAsync_failureData5::token"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reasonCode) as usize - ptr as usize },
        12usize,
        "Offset of field: MQTTAsync_failureData5::reasonCode"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).properties) as usize - ptr as usize },
        16usize,
        "Offset of field: MQTTAsync_failureData5::properties"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        40usize,
        "Offset of field: MQTTAsync_failureData5::code"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        48usize,
        "Offset of field: MQTTAsync_failureData5::message"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).packet_type) as usize - ptr as usize },
        56usize,
        "Offset of field: MQTTAsync_failureData5::packet_type"
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MQTTAsync_successData {
    pub token: MQTTAsync_token,
    pub alt: MQTTAsync_successData__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MQTTAsync_successData__bindgen_ty_1 {
    pub qos: ::std::os::raw::c_int,
    pub qosList: *mut ::std::os::raw::c_int,
    pub pub_: MQTTAsync_successData__bindgen_ty_1__bindgen_ty_1,
    pub connect: MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_successData__bindgen_ty_1__bindgen_ty_1 {
    pub message: MQTTAsync_message,
    pub destinationName: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_MQTTAsync_successData__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<MQTTAsync_successData__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MQTTAsync_successData__bindgen_ty_1__bindgen_ty_1>(),
        72usize,
        "Size of MQTTAsync_successData__bindgen_ty_1__bindgen_ty_1"
    );
    assert_eq!(
        ::std::mem::align_of::<MQTTAsync_successData__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        "Alignment of MQTTAsync_successData__bindgen_ty_1__bindgen_ty_1"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTAsync_successData__bindgen_ty_1__bindgen_ty_1::message"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destinationName) as usize - ptr as usize },
        64usize,
        "Offset of field: MQTTAsync_successData__bindgen_ty_1__bindgen_ty_1::destinationName"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2 {
    pub serverURI: *mut ::std::os::raw::c_char,
    pub MQTTVersion: ::std::os::raw::c_int,
    pub sessionPresent: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2>(),
        16usize,
        "Size of MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2"
    );
    assert_eq!(
        ::std::mem::align_of::<MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        "Alignment of MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).serverURI) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2::serverURI"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MQTTVersion) as usize - ptr as usize },
        8usize,
        "Offset of field: MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2::MQTTVersion"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sessionPresent) as usize - ptr as usize },
        12usize,
        "Offset of field: MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2::sessionPresent"
    );
}
#[test]
fn bindgen_test_layout_MQTTAsync_successData__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<MQTTAsync_successData__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MQTTAsync_successData__bindgen_ty_1>(),
        72usize,
        "Size of MQTTAsync_successData__bindgen_ty_1"
    );
    assert_eq!(
        ::std::mem::align_of::<MQTTAsync_successData__bindgen_ty_1>(),
        8usize,
        "Alignment of MQTTAsync_successData__bindgen_ty_1"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qos) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTAsync_successData__bindgen_ty_1::qos"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qosList) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTAsync_successData__bindgen_ty_1::qosList"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pub_) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTAsync_successData__bindgen_ty_1::pub_"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connect) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTAsync_successData__bindgen_ty_1::connect"
    );
}
#[test]
fn bindgen_test_layout_MQTTAsync_successData() {
    const UNINIT: ::std::mem::MaybeUninit<MQTTAsync_successData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MQTTAsync_successData>(),
        80usize,
        "Size of MQTTAsync_successData"
    );
    assert_eq!(
        ::std::mem::align_of::<MQTTAsync_successData>(),
        8usize,
        "Alignment of MQTTAsync_successData"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTAsync_successData::token"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt) as usize - ptr as usize },
        8usize,
        "Offset of field: MQTTAsync_successData::alt"
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MQTTAsync_successData5 {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub token: MQTTAsync_token,
    pub reasonCode: MQTTReasonCodes,
    pub properties: MQTTProperties,
    pub alt: MQTTAsync_successData5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MQTTAsync_successData5__bindgen_ty_1 {
    pub sub: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_1,
    pub pub_: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_2,
    pub connect: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3,
    pub unsub: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_1 {
    pub reasonCodeCount: ::std::os::raw::c_int,
    pub reasonCodes: *mut MQTTReasonCodes,
}
#[test]
fn bindgen_test_layout_MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        "Size of MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_1"
    );
    assert_eq!(
        ::std::mem::align_of::<MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        "Alignment of MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_1"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reasonCodeCount) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_1::reasonCodeCount"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reasonCodes) as usize - ptr as usize },
        8usize,
        "Offset of field: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_1::reasonCodes"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_2 {
    pub message: MQTTAsync_message,
    pub destinationName: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_2>(),
        72usize,
        "Size of MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_2"
    );
    assert_eq!(
        ::std::mem::align_of::<MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        "Alignment of MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_2"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_2::message"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destinationName) as usize - ptr as usize },
        64usize,
        "Offset of field: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_2::destinationName"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3 {
    pub serverURI: *mut ::std::os::raw::c_char,
    pub MQTTVersion: ::std::os::raw::c_int,
    pub sessionPresent: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        "Size of MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3"
    );
    assert_eq!(
        ::std::mem::align_of::<MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        "Alignment of MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).serverURI) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3::serverURI"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MQTTVersion) as usize - ptr as usize },
        8usize,
        "Offset of field: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3::MQTTVersion"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sessionPresent) as usize - ptr as usize },
        12usize,
        "Offset of field: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3::sessionPresent"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_4 {
    pub reasonCodeCount: ::std::os::raw::c_int,
    pub reasonCodes: *mut MQTTReasonCodes,
}
#[test]
fn bindgen_test_layout_MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_4>(),
        16usize,
        "Size of MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_4"
    );
    assert_eq!(
        ::std::mem::align_of::<MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        "Alignment of MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_4"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reasonCodeCount) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_4::reasonCodeCount"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reasonCodes) as usize - ptr as usize },
        8usize,
        "Offset of field: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_4::reasonCodes"
    );
}
#[test]
fn bindgen_test_layout_MQTTAsync_successData5__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<MQTTAsync_successData5__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MQTTAsync_successData5__bindgen_ty_1>(),
        72usize,
        "Size of MQTTAsync_successData5__bindgen_ty_1"
    );
    assert_eq!(
        ::std::mem::align_of::<MQTTAsync_successData5__bindgen_ty_1>(),
        8usize,
        "Alignment of MQTTAsync_successData5__bindgen_ty_1"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sub) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTAsync_successData5__bindgen_ty_1::sub"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pub_) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTAsync_successData5__bindgen_ty_1::pub_"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connect) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTAsync_successData5__bindgen_ty_1::connect"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unsub) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTAsync_successData5__bindgen_ty_1::unsub"
    );
}
#[test]
fn bindgen_test_layout_MQTTAsync_successData5() {
    const UNINIT: ::std::mem::MaybeUninit<MQTTAsync_successData5> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MQTTAsync_successData5>(),
        112usize,
        "Size of MQTTAsync_successData5"
    );
    assert_eq!(
        ::std::mem::align_of::<MQTTAsync_successData5>(),
        8usize,
        "Alignment of MQTTAsync_successData5"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).struct_id) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTAsync_successData5::struct_id"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).struct_version) as usize - ptr as usize },
        4usize,
        "Offset of field: MQTTAsync_successData5::struct_version"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        8usize,
        "Offset of field: MQTTAsync_successData5::token"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reasonCode) as usize - ptr as usize },
        12usize,
        "Offset of field: MQTTAsync_successData5::reasonCode"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).properties) as usize - ptr as usize },
        16usize,
        "Offset of field: MQTTAsync_successData5::properties"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt) as usize - ptr as usize },
        40usize,
        "Offset of field: MQTTAsync_successData5::alt"
    );
}
pub type MQTTAsync_onSuccess = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        response: *mut MQTTAsync_successData,
    ),
>;
pub type MQTTAsync_onSuccess5 = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        response: *mut MQTTAsync_successData5,
    ),
>;
pub type MQTTAsync_onFailure = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        response: *mut MQTTAsync_failureData,
    ),
>;
pub type MQTTAsync_onFailure5 = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        response: *mut MQTTAsync_failureData5,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_responseOptions {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub onSuccess: MQTTAsync_onSuccess,
    pub onFailure: MQTTAsync_onFailure,
    pub context: *mut ::std::os::raw::c_void,
    pub token: MQTTAsync_token,
    pub onSuccess5: MQTTAsync_onSuccess5,
    pub onFailure5: MQTTAsync_onFailure5,
    pub properties: MQTTProperties,
    pub subscribeOptions: MQTTSubscribe_options,
    pub subscribeOptionsCount: ::std::os::raw::c_int,
    pub subscribeOptionsList: *mut MQTTSubscribe_options,
}
#[test]
fn bindgen_test_layout_MQTTAsync_responseOptions() {
    const UNINIT: ::std::mem::MaybeUninit<MQTTAsync_responseOptions> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MQTTAsync_responseOptions>(),
        104usize,
        "Size of MQTTAsync_responseOptions"
    );
    assert_eq!(
        ::std::mem::align_of::<MQTTAsync_responseOptions>(),
        8usize,
        "Alignment of MQTTAsync_responseOptions"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).struct_id) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTAsync_responseOptions::struct_id"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).struct_version) as usize - ptr as usize },
        4usize,
        "Offset of field: MQTTAsync_responseOptions::struct_version"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onSuccess) as usize - ptr as usize },
        8usize,
        "Offset of field: MQTTAsync_responseOptions::onSuccess"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onFailure) as usize - ptr as usize },
        16usize,
        "Offset of field: MQTTAsync_responseOptions::onFailure"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        24usize,
        "Offset of field: MQTTAsync_responseOptions::context"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        32usize,
        "Offset of field: MQTTAsync_responseOptions::token"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onSuccess5) as usize - ptr as usize },
        40usize,
        "Offset of field: MQTTAsync_responseOptions::onSuccess5"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onFailure5) as usize - ptr as usize },
        48usize,
        "Offset of field: MQTTAsync_responseOptions::onFailure5"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).properties) as usize - ptr as usize },
        56usize,
        "Offset of field: MQTTAsync_responseOptions::properties"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subscribeOptions) as usize - ptr as usize },
        80usize,
        "Offset of field: MQTTAsync_responseOptions::subscribeOptions"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subscribeOptionsCount) as usize - ptr as usize },
        92usize,
        "Offset of field: MQTTAsync_responseOptions::subscribeOptionsCount"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subscribeOptionsList) as usize - ptr as usize },
        96usize,
        "Offset of field: MQTTAsync_responseOptions::subscribeOptionsList"
    );
}
pub type MQTTAsync_callOptions = MQTTAsync_responseOptions;
extern "C" {
    pub fn MQTTAsync_setCallbacks(
        handle: MQTTAsync,
        context: *mut ::std::os::raw::c_void,
        cl: MQTTAsync_connectionLost,
        ma: MQTTAsync_messageArrived,
        dc: MQTTAsync_deliveryComplete,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MQTTAsync_setConnectionLostCallback(
        handle: MQTTAsync,
        context: *mut ::std::os::raw::c_void,
        cl: MQTTAsync_connectionLost,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MQTTAsync_setMessageArrivedCallback(
        handle: MQTTAsync,
        context: *mut ::std::os::raw::c_void,
        ma: MQTTAsync_messageArrived,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MQTTAsync_setDeliveryCompleteCallback(
        handle: MQTTAsync,
        context: *mut ::std::os::raw::c_void,
        dc: MQTTAsync_deliveryComplete,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MQTTAsync_setConnected(
        handle: MQTTAsync,
        context: *mut ::std::os::raw::c_void,
        co: MQTTAsync_connected,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MQTTAsync_reconnect(handle: MQTTAsync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MQTTAsync_create(
        handle: *mut MQTTAsync,
        serverURI: *const ::std::os::raw::c_char,
        clientId: *const ::std::os::raw::c_char,
        persistence_type: ::std::os::raw::c_int,
        persistence_context: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_createOptions {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub sendWhileDisconnected: ::std::os::raw::c_int,
    pub maxBufferedMessages: ::std::os::raw::c_int,
    pub MQTTVersion: ::std::os::raw::c_int,
    pub allowDisconnectedSendAtAnyTime: ::std::os::raw::c_int,
    pub deleteOldestMessages: ::std::os::raw::c_int,
    pub restoreMessages: ::std::os::raw::c_int,
    pub persistQoS0: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_MQTTAsync_createOptions() {
    const UNINIT: ::std::mem::MaybeUninit<MQTTAsync_createOptions> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MQTTAsync_createOptions>(),
        36usize,
        "Size of MQTTAsync_createOptions"
    );
    assert_eq!(
        ::std::mem::align_of::<MQTTAsync_createOptions>(),
        4usize,
        "Alignment of MQTTAsync_createOptions"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).struct_id) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTAsync_createOptions::struct_id"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).struct_version) as usize - ptr as usize },
        4usize,
        "Offset of field: MQTTAsync_createOptions::struct_version"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sendWhileDisconnected) as usize - ptr as usize },
        8usize,
        "Offset of field: MQTTAsync_createOptions::sendWhileDisconnected"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxBufferedMessages) as usize - ptr as usize },
        12usize,
        "Offset of field: MQTTAsync_createOptions::maxBufferedMessages"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MQTTVersion) as usize - ptr as usize },
        16usize,
        "Offset of field: MQTTAsync_createOptions::MQTTVersion"
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).allowDisconnectedSendAtAnyTime) as usize - ptr as usize
        },
        20usize,
        "Offset of field: MQTTAsync_createOptions::allowDisconnectedSendAtAnyTime"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deleteOldestMessages) as usize - ptr as usize },
        24usize,
        "Offset of field: MQTTAsync_createOptions::deleteOldestMessages"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).restoreMessages) as usize - ptr as usize },
        28usize,
        "Offset of field: MQTTAsync_createOptions::restoreMessages"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).persistQoS0) as usize - ptr as usize },
        32usize,
        "Offset of field: MQTTAsync_createOptions::persistQoS0"
    );
}
extern "C" {
    pub fn MQTTAsync_createWithOptions(
        handle: *mut MQTTAsync,
        serverURI: *const ::std::os::raw::c_char,
        clientId: *const ::std::os::raw::c_char,
        persistence_type: ::std::os::raw::c_int,
        persistence_context: *mut ::std::os::raw::c_void,
        options: *mut MQTTAsync_createOptions,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_willOptions {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub topicName: *const ::std::os::raw::c_char,
    pub message: *const ::std::os::raw::c_char,
    pub retained: ::std::os::raw::c_int,
    pub qos: ::std::os::raw::c_int,
    pub payload: MQTTAsync_willOptions__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_willOptions__bindgen_ty_1 {
    pub len: ::std::os::raw::c_int,
    pub data: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_MQTTAsync_willOptions__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<MQTTAsync_willOptions__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MQTTAsync_willOptions__bindgen_ty_1>(),
        16usize,
        "Size of MQTTAsync_willOptions__bindgen_ty_1"
    );
    assert_eq!(
        ::std::mem::align_of::<MQTTAsync_willOptions__bindgen_ty_1>(),
        8usize,
        "Alignment of MQTTAsync_willOptions__bindgen_ty_1"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTAsync_willOptions__bindgen_ty_1::len"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        "Offset of field: MQTTAsync_willOptions__bindgen_ty_1::data"
    );
}
#[test]
fn bindgen_test_layout_MQTTAsync_willOptions() {
    const UNINIT: ::std::mem::MaybeUninit<MQTTAsync_willOptions> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MQTTAsync_willOptions>(),
        48usize,
        "Size of MQTTAsync_willOptions"
    );
    assert_eq!(
        ::std::mem::align_of::<MQTTAsync_willOptions>(),
        8usize,
        "Alignment of MQTTAsync_willOptions"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).struct_id) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTAsync_willOptions::struct_id"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).struct_version) as usize - ptr as usize },
        4usize,
        "Offset of field: MQTTAsync_willOptions::struct_version"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).topicName) as usize - ptr as usize },
        8usize,
        "Offset of field: MQTTAsync_willOptions::topicName"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        16usize,
        "Offset of field: MQTTAsync_willOptions::message"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retained) as usize - ptr as usize },
        24usize,
        "Offset of field: MQTTAsync_willOptions::retained"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qos) as usize - ptr as usize },
        28usize,
        "Offset of field: MQTTAsync_willOptions::qos"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).payload) as usize - ptr as usize },
        32usize,
        "Offset of field: MQTTAsync_willOptions::payload"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_SSLOptions {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub trustStore: *const ::std::os::raw::c_char,
    pub keyStore: *const ::std::os::raw::c_char,
    pub privateKey: *const ::std::os::raw::c_char,
    pub privateKeyPassword: *const ::std::os::raw::c_char,
    pub enabledCipherSuites: *const ::std::os::raw::c_char,
    pub enableServerCertAuth: ::std::os::raw::c_int,
    pub sslVersion: ::std::os::raw::c_int,
    pub verify: ::std::os::raw::c_int,
    pub CApath: *const ::std::os::raw::c_char,
    pub ssl_error_cb: ::std::option::Option<
        unsafe extern "C" fn(
            str_: *const ::std::os::raw::c_char,
            len: usize,
            u: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub ssl_error_context: *mut ::std::os::raw::c_void,
    pub ssl_psk_cb: ::std::option::Option<
        unsafe extern "C" fn(
            hint: *const ::std::os::raw::c_char,
            identity: *mut ::std::os::raw::c_char,
            max_identity_len: ::std::os::raw::c_uint,
            psk: *mut ::std::os::raw::c_uchar,
            max_psk_len: ::std::os::raw::c_uint,
            u: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_uint,
    >,
    pub ssl_psk_context: *mut ::std::os::raw::c_void,
    pub disableDefaultTrustStore: ::std::os::raw::c_int,
    pub protos: *const ::std::os::raw::c_uchar,
    pub protos_len: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_MQTTAsync_SSLOptions() {
    const UNINIT: ::std::mem::MaybeUninit<MQTTAsync_SSLOptions> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MQTTAsync_SSLOptions>(),
        128usize,
        "Size of MQTTAsync_SSLOptions"
    );
    assert_eq!(
        ::std::mem::align_of::<MQTTAsync_SSLOptions>(),
        8usize,
        "Alignment of MQTTAsync_SSLOptions"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).struct_id) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTAsync_SSLOptions::struct_id"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).struct_version) as usize - ptr as usize },
        4usize,
        "Offset of field: MQTTAsync_SSLOptions::struct_version"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trustStore) as usize - ptr as usize },
        8usize,
        "Offset of field: MQTTAsync_SSLOptions::trustStore"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keyStore) as usize - ptr as usize },
        16usize,
        "Offset of field: MQTTAsync_SSLOptions::keyStore"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).privateKey) as usize - ptr as usize },
        24usize,
        "Offset of field: MQTTAsync_SSLOptions::privateKey"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).privateKeyPassword) as usize - ptr as usize },
        32usize,
        "Offset of field: MQTTAsync_SSLOptions::privateKeyPassword"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enabledCipherSuites) as usize - ptr as usize },
        40usize,
        "Offset of field: MQTTAsync_SSLOptions::enabledCipherSuites"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enableServerCertAuth) as usize - ptr as usize },
        48usize,
        "Offset of field: MQTTAsync_SSLOptions::enableServerCertAuth"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sslVersion) as usize - ptr as usize },
        52usize,
        "Offset of field: MQTTAsync_SSLOptions::sslVersion"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).verify) as usize - ptr as usize },
        56usize,
        "Offset of field: MQTTAsync_SSLOptions::verify"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CApath) as usize - ptr as usize },
        64usize,
        "Offset of field: MQTTAsync_SSLOptions::CApath"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ssl_error_cb) as usize - ptr as usize },
        72usize,
        "Offset of field: MQTTAsync_SSLOptions::ssl_error_cb"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ssl_error_context) as usize - ptr as usize },
        80usize,
        "Offset of field: MQTTAsync_SSLOptions::ssl_error_context"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ssl_psk_cb) as usize - ptr as usize },
        88usize,
        "Offset of field: MQTTAsync_SSLOptions::ssl_psk_cb"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ssl_psk_context) as usize - ptr as usize },
        96usize,
        "Offset of field: MQTTAsync_SSLOptions::ssl_psk_context"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disableDefaultTrustStore) as usize - ptr as usize },
        104usize,
        "Offset of field: MQTTAsync_SSLOptions::disableDefaultTrustStore"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).protos) as usize - ptr as usize },
        112usize,
        "Offset of field: MQTTAsync_SSLOptions::protos"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).protos_len) as usize - ptr as usize },
        120usize,
        "Offset of field: MQTTAsync_SSLOptions::protos_len"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_nameValue {
    pub name: *const ::std::os::raw::c_char,
    pub value: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_MQTTAsync_nameValue() {
    const UNINIT: ::std::mem::MaybeUninit<MQTTAsync_nameValue> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MQTTAsync_nameValue>(),
        16usize,
        "Size of MQTTAsync_nameValue"
    );
    assert_eq!(
        ::std::mem::align_of::<MQTTAsync_nameValue>(),
        8usize,
        "Alignment of MQTTAsync_nameValue"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTAsync_nameValue::name"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        "Offset of field: MQTTAsync_nameValue::value"
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_connectOptions {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub keepAliveInterval: ::std::os::raw::c_int,
    pub cleansession: ::std::os::raw::c_int,
    pub maxInflight: ::std::os::raw::c_int,
    pub will: *mut MQTTAsync_willOptions,
    pub username: *const ::std::os::raw::c_char,
    pub password: *const ::std::os::raw::c_char,
    pub connectTimeout: ::std::os::raw::c_int,
    pub retryInterval: ::std::os::raw::c_int,
    pub ssl: *mut MQTTAsync_SSLOptions,
    pub onSuccess: MQTTAsync_onSuccess,
    pub onFailure: MQTTAsync_onFailure,
    pub context: *mut ::std::os::raw::c_void,
    pub serverURIcount: ::std::os::raw::c_int,
    pub serverURIs: *const *mut ::std::os::raw::c_char,
    pub MQTTVersion: ::std::os::raw::c_int,
    pub automaticReconnect: ::std::os::raw::c_int,
    pub minRetryInterval: ::std::os::raw::c_int,
    pub maxRetryInterval: ::std::os::raw::c_int,
    pub binarypwd: MQTTAsync_connectOptions__bindgen_ty_1,
    pub cleanstart: ::std::os::raw::c_int,
    pub connectProperties: *mut MQTTProperties,
    pub willProperties: *mut MQTTProperties,
    pub onSuccess5: MQTTAsync_onSuccess5,
    pub onFailure5: MQTTAsync_onFailure5,
    pub httpHeaders: *const MQTTAsync_nameValue,
    pub httpProxy: *const ::std::os::raw::c_char,
    pub httpsProxy: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_connectOptions__bindgen_ty_1 {
    pub len: ::std::os::raw::c_int,
    pub data: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_MQTTAsync_connectOptions__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<MQTTAsync_connectOptions__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MQTTAsync_connectOptions__bindgen_ty_1>(),
        16usize,
        "Size of MQTTAsync_connectOptions__bindgen_ty_1"
    );
    assert_eq!(
        ::std::mem::align_of::<MQTTAsync_connectOptions__bindgen_ty_1>(),
        8usize,
        "Alignment of MQTTAsync_connectOptions__bindgen_ty_1"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTAsync_connectOptions__bindgen_ty_1::len"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        "Offset of field: MQTTAsync_connectOptions__bindgen_ty_1::data"
    );
}
#[test]
fn bindgen_test_layout_MQTTAsync_connectOptions() {
    const UNINIT: ::std::mem::MaybeUninit<MQTTAsync_connectOptions> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MQTTAsync_connectOptions>(),
        200usize,
        "Size of MQTTAsync_connectOptions"
    );
    assert_eq!(
        ::std::mem::align_of::<MQTTAsync_connectOptions>(),
        8usize,
        "Alignment of MQTTAsync_connectOptions"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).struct_id) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTAsync_connectOptions::struct_id"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).struct_version) as usize - ptr as usize },
        4usize,
        "Offset of field: MQTTAsync_connectOptions::struct_version"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keepAliveInterval) as usize - ptr as usize },
        8usize,
        "Offset of field: MQTTAsync_connectOptions::keepAliveInterval"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cleansession) as usize - ptr as usize },
        12usize,
        "Offset of field: MQTTAsync_connectOptions::cleansession"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxInflight) as usize - ptr as usize },
        16usize,
        "Offset of field: MQTTAsync_connectOptions::maxInflight"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).will) as usize - ptr as usize },
        24usize,
        "Offset of field: MQTTAsync_connectOptions::will"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).username) as usize - ptr as usize },
        32usize,
        "Offset of field: MQTTAsync_connectOptions::username"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).password) as usize - ptr as usize },
        40usize,
        "Offset of field: MQTTAsync_connectOptions::password"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connectTimeout) as usize - ptr as usize },
        48usize,
        "Offset of field: MQTTAsync_connectOptions::connectTimeout"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retryInterval) as usize - ptr as usize },
        52usize,
        "Offset of field: MQTTAsync_connectOptions::retryInterval"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ssl) as usize - ptr as usize },
        56usize,
        "Offset of field: MQTTAsync_connectOptions::ssl"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onSuccess) as usize - ptr as usize },
        64usize,
        "Offset of field: MQTTAsync_connectOptions::onSuccess"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onFailure) as usize - ptr as usize },
        72usize,
        "Offset of field: MQTTAsync_connectOptions::onFailure"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        80usize,
        "Offset of field: MQTTAsync_connectOptions::context"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).serverURIcount) as usize - ptr as usize },
        88usize,
        "Offset of field: MQTTAsync_connectOptions::serverURIcount"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).serverURIs) as usize - ptr as usize },
        96usize,
        "Offset of field: MQTTAsync_connectOptions::serverURIs"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MQTTVersion) as usize - ptr as usize },
        104usize,
        "Offset of field: MQTTAsync_connectOptions::MQTTVersion"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).automaticReconnect) as usize - ptr as usize },
        108usize,
        "Offset of field: MQTTAsync_connectOptions::automaticReconnect"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minRetryInterval) as usize - ptr as usize },
        112usize,
        "Offset of field: MQTTAsync_connectOptions::minRetryInterval"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxRetryInterval) as usize - ptr as usize },
        116usize,
        "Offset of field: MQTTAsync_connectOptions::maxRetryInterval"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).binarypwd) as usize - ptr as usize },
        120usize,
        "Offset of field: MQTTAsync_connectOptions::binarypwd"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cleanstart) as usize - ptr as usize },
        136usize,
        "Offset of field: MQTTAsync_connectOptions::cleanstart"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connectProperties) as usize - ptr as usize },
        144usize,
        "Offset of field: MQTTAsync_connectOptions::connectProperties"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).willProperties) as usize - ptr as usize },
        152usize,
        "Offset of field: MQTTAsync_connectOptions::willProperties"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onSuccess5) as usize - ptr as usize },
        160usize,
        "Offset of field: MQTTAsync_connectOptions::onSuccess5"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onFailure5) as usize - ptr as usize },
        168usize,
        "Offset of field: MQTTAsync_connectOptions::onFailure5"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).httpHeaders) as usize - ptr as usize },
        176usize,
        "Offset of field: MQTTAsync_connectOptions::httpHeaders"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).httpProxy) as usize - ptr as usize },
        184usize,
        "Offset of field: MQTTAsync_connectOptions::httpProxy"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).httpsProxy) as usize - ptr as usize },
        192usize,
        "Offset of field: MQTTAsync_connectOptions::httpsProxy"
    );
}
extern "C" {
    pub fn MQTTAsync_connect(
        handle: MQTTAsync,
        options: *const MQTTAsync_connectOptions,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_disconnectOptions {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub timeout: ::std::os::raw::c_int,
    pub onSuccess: MQTTAsync_onSuccess,
    pub onFailure: MQTTAsync_onFailure,
    pub context: *mut ::std::os::raw::c_void,
    pub properties: MQTTProperties,
    pub reasonCode: MQTTReasonCodes,
    pub onSuccess5: MQTTAsync_onSuccess5,
    pub onFailure5: MQTTAsync_onFailure5,
}
#[test]
fn bindgen_test_layout_MQTTAsync_disconnectOptions() {
    const UNINIT: ::std::mem::MaybeUninit<MQTTAsync_disconnectOptions> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MQTTAsync_disconnectOptions>(),
        88usize,
        "Size of MQTTAsync_disconnectOptions"
    );
    assert_eq!(
        ::std::mem::align_of::<MQTTAsync_disconnectOptions>(),
        8usize,
        "Alignment of MQTTAsync_disconnectOptions"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).struct_id) as usize - ptr as usize },
        0usize,
        "Offset of field: MQTTAsync_disconnectOptions::struct_id"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).struct_version) as usize - ptr as usize },
        4usize,
        "Offset of field: MQTTAsync_disconnectOptions::struct_version"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        8usize,
        "Offset of field: MQTTAsync_disconnectOptions::timeout"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onSuccess) as usize - ptr as usize },
        16usize,
        "Offset of field: MQTTAsync_disconnectOptions::onSuccess"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onFailure) as usize - ptr as usize },
        24usize,
        "Offset of field: MQTTAsync_disconnectOptions::onFailure"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        32usize,
        "Offset of field: MQTTAsync_disconnectOptions::context"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).properties) as usize - ptr as usize },
        40usize,
        "Offset of field: MQTTAsync_disconnectOptions::properties"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reasonCode) as usize - ptr as usize },
        64usize,
        "Offset of field: MQTTAsync_disconnectOptions::reasonCode"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onSuccess5) as usize - ptr as usize },
        72usize,
        "Offset of field: MQTTAsync_disconnectOptions::onSuccess5"
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onFailure5) as usize - ptr as usize },
        80usize,
        "Offset of field: MQTTAsync_disconnectOptions::onFailure5"
    );
}
extern "C" {
    pub fn MQTTAsync_disconnect(
        handle: MQTTAsync,
        options: *const MQTTAsync_disconnectOptions,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MQTTAsync_isConnected(handle: MQTTAsync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MQTTAsync_subscribe(
        handle: MQTTAsync,
        topic: *const ::std::os::raw::c_char,
        qos: ::std::os::raw::c_int,
        response: *mut MQTTAsync_responseOptions,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MQTTAsync_subscribeMany(
        handle: MQTTAsync,
        count: ::std::os::raw::c_int,
        topic: *const *mut ::std::os::raw::c_char,
        qos: *const ::std::os::raw::c_int,
        response: *mut MQTTAsync_responseOptions,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MQTTAsync_unsubscribe(
        handle: MQTTAsync,
        topic: *const ::std::os::raw::c_char,
        response: *mut MQTTAsync_responseOptions,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MQTTAsync_unsubscribeMany(
        handle: MQTTAsync,
        count: ::std::os::raw::c_int,
        topic: *const *mut ::std::os::raw::c_char,
        response: *mut MQTTAsync_responseOptions,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MQTTAsync_send(
        handle: MQTTAsync,
        destinationName: *const ::std::os::raw::c_char,
        payloadlen: ::std::os::raw::c_int,
        payload: *const ::std::os::raw::c_void,
        qos: ::std::os::raw::c_int,
        retained: ::std::os::raw::c_int,
        response: *mut MQTTAsync_responseOptions,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MQTTAsync_sendMessage(
        handle: MQTTAsync,
        destinationName: *const ::std::os::raw::c_char,
        msg: *const MQTTAsync_message,
        response: *mut MQTTAsync_responseOptions,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MQTTAsync_getPendingTokens(
        handle: MQTTAsync,
        tokens: *mut *mut MQTTAsync_token,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MQTTAsync_isComplete(handle: MQTTAsync, token: MQTTAsync_token)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MQTTAsync_waitForCompletion(
        handle: MQTTAsync,
        token: MQTTAsync_token,
        timeout: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MQTTAsync_freeMessage(msg: *mut *mut MQTTAsync_message);
}
extern "C" {
    pub fn MQTTAsync_free(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn MQTTAsync_malloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn MQTTAsync_destroy(handle: *mut MQTTAsync);
}
pub const MQTTASYNC_TRACE_LEVELS_MQTTASYNC_TRACE_MAXIMUM: MQTTASYNC_TRACE_LEVELS = 1;
pub const MQTTASYNC_TRACE_LEVELS_MQTTASYNC_TRACE_MEDIUM: MQTTASYNC_TRACE_LEVELS = 2;
pub const MQTTASYNC_TRACE_LEVELS_MQTTASYNC_TRACE_MINIMUM: MQTTASYNC_TRACE_LEVELS = 3;
pub const MQTTASYNC_TRACE_LEVELS_MQTTASYNC_TRACE_PROTOCOL: MQTTASYNC_TRACE_LEVELS = 4;
pub const MQTTASYNC_TRACE_LEVELS_MQTTASYNC_TRACE_ERROR: MQTTASYNC_TRACE_LEVELS = 5;
pub const MQTTASYNC_TRACE_LEVELS_MQTTASYNC_TRACE_SEVERE: MQTTASYNC_TRACE_LEVELS = 6;
pub const MQTTASYNC_TRACE_LEVELS_MQTTASYNC_TRACE_FATAL: MQTTASYNC_TRACE_LEVELS = 7;
pub type MQTTASYNC_TRACE_LEVELS = ::std::os::raw::c_int;
extern "C" {
    pub fn MQTTAsync_setTraceLevel(level: MQTTASYNC_TRACE_LEVELS);
}
pub type MQTTAsync_traceCallback = ::std::option::Option<
    unsafe extern "C" fn(level: MQTTASYNC_TRACE_LEVELS, message: *mut ::std::os::raw::c_char),
>;
extern "C" {
    pub fn MQTTAsync_setTraceCallback(callback: MQTTAsync_traceCallback);
}
extern "C" {
    pub fn MQTTAsync_getVersionInfo() -> *mut MQTTAsync_nameValue;
}
extern "C" {
    pub fn MQTTAsync_strerror(code: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
