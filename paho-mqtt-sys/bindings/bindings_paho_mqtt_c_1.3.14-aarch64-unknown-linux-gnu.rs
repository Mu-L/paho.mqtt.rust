/* automatically generated by rust-bindgen 0.71.1 */

#[doc = r" If Bindgen could only determine the size and alignment of a"]
#[doc = r" type, it is represented like this."]
#[derive(PartialEq, Copy, Clone, Debug, Hash)]
#[repr(C)]
pub struct __BindgenOpaqueArray<T: Copy, const N: usize>(pub [T; N]);
impl<T: Copy + Default, const N: usize> Default for __BindgenOpaqueArray<T, N> {
    fn default() -> Self {
        Self([<T as Default>::default(); N])
    }
}
pub const _STDIO_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 0;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const MQTT_INVALID_PROPERTY_ID: i32 = -2;
pub const MQTTCLIENT_PERSISTENCE_DEFAULT: u32 = 0;
pub const MQTTCLIENT_PERSISTENCE_NONE: u32 = 1;
pub const MQTTCLIENT_PERSISTENCE_USER: u32 = 2;
pub const MQTTCLIENT_PERSISTENCE_ERROR: i32 = -2;
pub const MQTTASYNC_SUCCESS: u32 = 0;
pub const MQTTASYNC_FAILURE: i32 = -1;
pub const MQTTASYNC_PERSISTENCE_ERROR: i32 = -2;
pub const MQTTASYNC_DISCONNECTED: i32 = -3;
pub const MQTTASYNC_MAX_MESSAGES_INFLIGHT: i32 = -4;
pub const MQTTASYNC_BAD_UTF8_STRING: i32 = -5;
pub const MQTTASYNC_NULL_PARAMETER: i32 = -6;
pub const MQTTASYNC_TOPICNAME_TRUNCATED: i32 = -7;
pub const MQTTASYNC_BAD_STRUCTURE: i32 = -8;
pub const MQTTASYNC_BAD_QOS: i32 = -9;
pub const MQTTASYNC_NO_MORE_MSGIDS: i32 = -10;
pub const MQTTASYNC_OPERATION_INCOMPLETE: i32 = -11;
pub const MQTTASYNC_MAX_BUFFERED_MESSAGES: i32 = -12;
pub const MQTTASYNC_SSL_NOT_SUPPORTED: i32 = -13;
pub const MQTTASYNC_BAD_PROTOCOL: i32 = -14;
pub const MQTTASYNC_BAD_MQTT_OPTION: i32 = -15;
pub const MQTTASYNC_WRONG_MQTT_VERSION: i32 = -16;
pub const MQTTASYNC_0_LEN_WILL_TOPIC: i32 = -17;
pub const MQTTASYNC_COMMAND_IGNORED: i32 = -18;
pub const MQTTASYNC_MAX_BUFFERED: i32 = -19;
pub const MQTTVERSION_DEFAULT: u32 = 0;
pub const MQTTVERSION_3_1: u32 = 3;
pub const MQTTVERSION_3_1_1: u32 = 4;
pub const MQTTVERSION_5: u32 = 5;
pub const MQTT_BAD_SUBSCRIBE: u32 = 128;
pub const MQTT_SSL_VERSION_DEFAULT: u32 = 0;
pub const MQTT_SSL_VERSION_TLS_1_0: u32 = 1;
pub const MQTT_SSL_VERSION_TLS_1_1: u32 = 2;
pub const MQTT_SSL_VERSION_TLS_1_2: u32 = 3;
pub const MQTTASYNC_TRUE: u32 = 1;
pub type va_list = __BindgenOpaqueArray<u64, 4usize>;
pub type __gnuc_va_list = __BindgenOpaqueArray<u64, 4usize>;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_uint;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_int;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t__bindgen_ty_1"]
        [::std::mem::size_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Alignment of __mbstate_t__bindgen_ty_1"]
        [::std::mem::align_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wch"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wch) - 0usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wchb"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wchb) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 8usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 4usize];
    ["Offset of field: __mbstate_t::__count"]
        [::std::mem::offset_of!(__mbstate_t, __count) - 0usize];
    ["Offset of field: __mbstate_t::__value"]
        [::std::mem::offset_of!(__mbstate_t, __value) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos_t"][::std::mem::size_of::<_G_fpos_t>() - 16usize];
    ["Alignment of _G_fpos_t"][::std::mem::align_of::<_G_fpos_t>() - 8usize];
    ["Offset of field: _G_fpos_t::__pos"][::std::mem::offset_of!(_G_fpos_t, __pos) - 0usize];
    ["Offset of field: _G_fpos_t::__state"][::std::mem::offset_of!(_G_fpos_t, __state) - 8usize];
};
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos64_t"][::std::mem::size_of::<_G_fpos64_t>() - 16usize];
    ["Alignment of _G_fpos64_t"][::std::mem::align_of::<_G_fpos64_t>() - 8usize];
    ["Offset of field: _G_fpos64_t::__pos"][::std::mem::offset_of!(_G_fpos64_t, __pos) - 0usize];
    ["Offset of field: _G_fpos64_t::__state"]
        [::std::mem::offset_of!(_G_fpos64_t, __state) - 8usize];
};
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_FILE"][::std::mem::size_of::<_IO_FILE>() - 216usize];
    ["Alignment of _IO_FILE"][::std::mem::align_of::<_IO_FILE>() - 8usize];
    ["Offset of field: _IO_FILE::_flags"][::std::mem::offset_of!(_IO_FILE, _flags) - 0usize];
    ["Offset of field: _IO_FILE::_IO_read_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
    ["Offset of field: _IO_FILE::_IO_read_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
    ["Offset of field: _IO_FILE::_IO_read_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
    ["Offset of field: _IO_FILE::_IO_write_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
    ["Offset of field: _IO_FILE::_IO_write_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
    ["Offset of field: _IO_FILE::_IO_write_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
    ["Offset of field: _IO_FILE::_IO_buf_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
    ["Offset of field: _IO_FILE::_IO_buf_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
    ["Offset of field: _IO_FILE::_IO_save_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
    ["Offset of field: _IO_FILE::_IO_backup_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
    ["Offset of field: _IO_FILE::_IO_save_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
    ["Offset of field: _IO_FILE::_markers"][::std::mem::offset_of!(_IO_FILE, _markers) - 96usize];
    ["Offset of field: _IO_FILE::_chain"][::std::mem::offset_of!(_IO_FILE, _chain) - 104usize];
    ["Offset of field: _IO_FILE::_fileno"][::std::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
    ["Offset of field: _IO_FILE::_flags2"][::std::mem::offset_of!(_IO_FILE, _flags2) - 116usize];
    ["Offset of field: _IO_FILE::_old_offset"]
        [::std::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
    ["Offset of field: _IO_FILE::_cur_column"]
        [::std::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
    ["Offset of field: _IO_FILE::_vtable_offset"]
        [::std::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
    ["Offset of field: _IO_FILE::_shortbuf"]
        [::std::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
    ["Offset of field: _IO_FILE::_lock"][::std::mem::offset_of!(_IO_FILE, _lock) - 136usize];
    ["Offset of field: _IO_FILE::_offset"][::std::mem::offset_of!(_IO_FILE, _offset) - 144usize];
    ["Offset of field: _IO_FILE::_codecvt"][::std::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
    ["Offset of field: _IO_FILE::_wide_data"]
        [::std::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
    ["Offset of field: _IO_FILE::_freeres_list"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
    ["Offset of field: _IO_FILE::_freeres_buf"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
    ["Offset of field: _IO_FILE::__pad5"][::std::mem::offset_of!(_IO_FILE, __pad5) - 184usize];
    ["Offset of field: _IO_FILE::_mode"][::std::mem::offset_of!(_IO_FILE, _mode) - 192usize];
    ["Offset of field: _IO_FILE::_unused2"][::std::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
};
pub type off_t = __off_t;
pub type fpos_t = __fpos_t;
unsafe extern "C" {
    pub static mut stdin: *mut FILE;
}
unsafe extern "C" {
    pub static mut stdout: *mut FILE;
}
unsafe extern "C" {
    pub static mut stderr: *mut FILE;
}
unsafe extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
unsafe extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
unsafe extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
unsafe extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: __BindgenOpaqueArray<u64, 4usize>,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: __BindgenOpaqueArray<u64, 4usize>,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: __BindgenOpaqueArray<u64, 4usize>,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: __BindgenOpaqueArray<u64, 4usize>,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: __BindgenOpaqueArray<u64, 4usize>,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: __BindgenOpaqueArray<u64, 4usize>,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: __BindgenOpaqueArray<u64, 4usize>,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: __BindgenOpaqueArray<u64, 4usize>,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: __BindgenOpaqueArray<u64, 4usize>,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: __BindgenOpaqueArray<u64, 4usize>,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
unsafe extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
unsafe extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
unsafe extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
unsafe extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
unsafe extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_PAYLOAD_FORMAT_INDICATOR: MQTTPropertyCodes = 1;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_MESSAGE_EXPIRY_INTERVAL: MQTTPropertyCodes = 2;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_CONTENT_TYPE: MQTTPropertyCodes = 3;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_RESPONSE_TOPIC: MQTTPropertyCodes = 8;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_CORRELATION_DATA: MQTTPropertyCodes = 9;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_SUBSCRIPTION_IDENTIFIER: MQTTPropertyCodes = 11;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_SESSION_EXPIRY_INTERVAL: MQTTPropertyCodes = 17;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_ASSIGNED_CLIENT_IDENTIFIER: MQTTPropertyCodes = 18;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_ASSIGNED_CLIENT_IDENTIFER: MQTTPropertyCodes = 18;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_SERVER_KEEP_ALIVE: MQTTPropertyCodes = 19;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_AUTHENTICATION_METHOD: MQTTPropertyCodes = 21;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_AUTHENTICATION_DATA: MQTTPropertyCodes = 22;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_REQUEST_PROBLEM_INFORMATION: MQTTPropertyCodes = 23;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_WILL_DELAY_INTERVAL: MQTTPropertyCodes = 24;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_REQUEST_RESPONSE_INFORMATION: MQTTPropertyCodes = 25;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_RESPONSE_INFORMATION: MQTTPropertyCodes = 26;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_SERVER_REFERENCE: MQTTPropertyCodes = 28;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_REASON_STRING: MQTTPropertyCodes = 31;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_RECEIVE_MAXIMUM: MQTTPropertyCodes = 33;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_TOPIC_ALIAS_MAXIMUM: MQTTPropertyCodes = 34;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_TOPIC_ALIAS: MQTTPropertyCodes = 35;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_MAXIMUM_QOS: MQTTPropertyCodes = 36;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_RETAIN_AVAILABLE: MQTTPropertyCodes = 37;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_USER_PROPERTY: MQTTPropertyCodes = 38;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_MAXIMUM_PACKET_SIZE: MQTTPropertyCodes = 39;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_WILDCARD_SUBSCRIPTION_AVAILABLE: MQTTPropertyCodes =
    40;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_SUBSCRIPTION_IDENTIFIERS_AVAILABLE:
    MQTTPropertyCodes = 41;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_SHARED_SUBSCRIPTION_AVAILABLE: MQTTPropertyCodes = 42;
pub type MQTTPropertyCodes = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn MQTTPropertyName(value: MQTTPropertyCodes) -> *const ::std::os::raw::c_char;
}
pub const MQTTPropertyTypes_MQTTPROPERTY_TYPE_BYTE: MQTTPropertyTypes = 0;
pub const MQTTPropertyTypes_MQTTPROPERTY_TYPE_TWO_BYTE_INTEGER: MQTTPropertyTypes = 1;
pub const MQTTPropertyTypes_MQTTPROPERTY_TYPE_FOUR_BYTE_INTEGER: MQTTPropertyTypes = 2;
pub const MQTTPropertyTypes_MQTTPROPERTY_TYPE_VARIABLE_BYTE_INTEGER: MQTTPropertyTypes = 3;
pub const MQTTPropertyTypes_MQTTPROPERTY_TYPE_BINARY_DATA: MQTTPropertyTypes = 4;
pub const MQTTPropertyTypes_MQTTPROPERTY_TYPE_UTF_8_ENCODED_STRING: MQTTPropertyTypes = 5;
pub const MQTTPropertyTypes_MQTTPROPERTY_TYPE_UTF_8_STRING_PAIR: MQTTPropertyTypes = 6;
pub type MQTTPropertyTypes = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn MQTTProperty_getType(value: MQTTPropertyCodes) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTLenString {
    pub len: ::std::os::raw::c_int,
    pub data: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTLenString"][::std::mem::size_of::<MQTTLenString>() - 16usize];
    ["Alignment of MQTTLenString"][::std::mem::align_of::<MQTTLenString>() - 8usize];
    ["Offset of field: MQTTLenString::len"][::std::mem::offset_of!(MQTTLenString, len) - 0usize];
    ["Offset of field: MQTTLenString::data"][::std::mem::offset_of!(MQTTLenString, data) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MQTTProperty {
    pub identifier: MQTTPropertyCodes,
    pub value: MQTTProperty__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MQTTProperty__bindgen_ty_1 {
    pub byte: ::std::os::raw::c_uchar,
    pub integer2: ::std::os::raw::c_ushort,
    pub integer4: ::std::os::raw::c_uint,
    pub __bindgen_anon_1: MQTTProperty__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTProperty__bindgen_ty_1__bindgen_ty_1 {
    pub data: MQTTLenString,
    pub value: MQTTLenString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTProperty__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<MQTTProperty__bindgen_ty_1__bindgen_ty_1>() - 32usize];
    ["Alignment of MQTTProperty__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<MQTTProperty__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: MQTTProperty__bindgen_ty_1__bindgen_ty_1::data"]
        [::std::mem::offset_of!(MQTTProperty__bindgen_ty_1__bindgen_ty_1, data) - 0usize];
    ["Offset of field: MQTTProperty__bindgen_ty_1__bindgen_ty_1::value"]
        [::std::mem::offset_of!(MQTTProperty__bindgen_ty_1__bindgen_ty_1, value) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTProperty__bindgen_ty_1"]
        [::std::mem::size_of::<MQTTProperty__bindgen_ty_1>() - 32usize];
    ["Alignment of MQTTProperty__bindgen_ty_1"]
        [::std::mem::align_of::<MQTTProperty__bindgen_ty_1>() - 8usize];
    ["Offset of field: MQTTProperty__bindgen_ty_1::byte"]
        [::std::mem::offset_of!(MQTTProperty__bindgen_ty_1, byte) - 0usize];
    ["Offset of field: MQTTProperty__bindgen_ty_1::integer2"]
        [::std::mem::offset_of!(MQTTProperty__bindgen_ty_1, integer2) - 0usize];
    ["Offset of field: MQTTProperty__bindgen_ty_1::integer4"]
        [::std::mem::offset_of!(MQTTProperty__bindgen_ty_1, integer4) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTProperty"][::std::mem::size_of::<MQTTProperty>() - 40usize];
    ["Alignment of MQTTProperty"][::std::mem::align_of::<MQTTProperty>() - 8usize];
    ["Offset of field: MQTTProperty::identifier"]
        [::std::mem::offset_of!(MQTTProperty, identifier) - 0usize];
    ["Offset of field: MQTTProperty::value"][::std::mem::offset_of!(MQTTProperty, value) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTProperties {
    pub count: ::std::os::raw::c_int,
    pub max_count: ::std::os::raw::c_int,
    pub length: ::std::os::raw::c_int,
    pub array: *mut MQTTProperty,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTProperties"][::std::mem::size_of::<MQTTProperties>() - 24usize];
    ["Alignment of MQTTProperties"][::std::mem::align_of::<MQTTProperties>() - 8usize];
    ["Offset of field: MQTTProperties::count"]
        [::std::mem::offset_of!(MQTTProperties, count) - 0usize];
    ["Offset of field: MQTTProperties::max_count"]
        [::std::mem::offset_of!(MQTTProperties, max_count) - 4usize];
    ["Offset of field: MQTTProperties::length"]
        [::std::mem::offset_of!(MQTTProperties, length) - 8usize];
    ["Offset of field: MQTTProperties::array"]
        [::std::mem::offset_of!(MQTTProperties, array) - 16usize];
};
unsafe extern "C" {
    pub fn MQTTProperties_len(props: *const MQTTProperties) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTProperties_add(
        props: *mut MQTTProperties,
        prop: *const MQTTProperty,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTProperties_write(
        pptr: *mut *mut ::std::os::raw::c_char,
        properties: *const MQTTProperties,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTProperties_read(
        properties: *mut MQTTProperties,
        pptr: *mut *mut ::std::os::raw::c_char,
        enddata: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTProperties_free(properties: *mut MQTTProperties);
}
unsafe extern "C" {
    pub fn MQTTProperties_copy(props: *const MQTTProperties) -> MQTTProperties;
}
unsafe extern "C" {
    pub fn MQTTProperties_hasProperty(
        props: *const MQTTProperties,
        propid: MQTTPropertyCodes,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTProperties_propertyCount(
        props: *const MQTTProperties,
        propid: MQTTPropertyCodes,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTProperties_getNumericValue(
        props: *const MQTTProperties,
        propid: MQTTPropertyCodes,
    ) -> i64;
}
unsafe extern "C" {
    pub fn MQTTProperties_getNumericValueAt(
        props: *const MQTTProperties,
        propid: MQTTPropertyCodes,
        index: ::std::os::raw::c_int,
    ) -> i64;
}
unsafe extern "C" {
    pub fn MQTTProperties_getProperty(
        props: *const MQTTProperties,
        propid: MQTTPropertyCodes,
    ) -> *mut MQTTProperty;
}
unsafe extern "C" {
    pub fn MQTTProperties_getPropertyAt(
        props: *const MQTTProperties,
        propid: MQTTPropertyCodes,
        index: ::std::os::raw::c_int,
    ) -> *mut MQTTProperty;
}
pub const MQTTReasonCodes_MQTTREASONCODE_SUCCESS: MQTTReasonCodes = 0;
pub const MQTTReasonCodes_MQTTREASONCODE_NORMAL_DISCONNECTION: MQTTReasonCodes = 0;
pub const MQTTReasonCodes_MQTTREASONCODE_GRANTED_QOS_0: MQTTReasonCodes = 0;
pub const MQTTReasonCodes_MQTTREASONCODE_GRANTED_QOS_1: MQTTReasonCodes = 1;
pub const MQTTReasonCodes_MQTTREASONCODE_GRANTED_QOS_2: MQTTReasonCodes = 2;
pub const MQTTReasonCodes_MQTTREASONCODE_DISCONNECT_WITH_WILL_MESSAGE: MQTTReasonCodes = 4;
pub const MQTTReasonCodes_MQTTREASONCODE_NO_MATCHING_SUBSCRIBERS: MQTTReasonCodes = 16;
pub const MQTTReasonCodes_MQTTREASONCODE_NO_SUBSCRIPTION_FOUND: MQTTReasonCodes = 17;
pub const MQTTReasonCodes_MQTTREASONCODE_CONTINUE_AUTHENTICATION: MQTTReasonCodes = 24;
pub const MQTTReasonCodes_MQTTREASONCODE_RE_AUTHENTICATE: MQTTReasonCodes = 25;
pub const MQTTReasonCodes_MQTTREASONCODE_UNSPECIFIED_ERROR: MQTTReasonCodes = 128;
pub const MQTTReasonCodes_MQTTREASONCODE_MALFORMED_PACKET: MQTTReasonCodes = 129;
pub const MQTTReasonCodes_MQTTREASONCODE_PROTOCOL_ERROR: MQTTReasonCodes = 130;
pub const MQTTReasonCodes_MQTTREASONCODE_IMPLEMENTATION_SPECIFIC_ERROR: MQTTReasonCodes = 131;
pub const MQTTReasonCodes_MQTTREASONCODE_UNSUPPORTED_PROTOCOL_VERSION: MQTTReasonCodes = 132;
pub const MQTTReasonCodes_MQTTREASONCODE_CLIENT_IDENTIFIER_NOT_VALID: MQTTReasonCodes = 133;
pub const MQTTReasonCodes_MQTTREASONCODE_BAD_USER_NAME_OR_PASSWORD: MQTTReasonCodes = 134;
pub const MQTTReasonCodes_MQTTREASONCODE_NOT_AUTHORIZED: MQTTReasonCodes = 135;
pub const MQTTReasonCodes_MQTTREASONCODE_SERVER_UNAVAILABLE: MQTTReasonCodes = 136;
pub const MQTTReasonCodes_MQTTREASONCODE_SERVER_BUSY: MQTTReasonCodes = 137;
pub const MQTTReasonCodes_MQTTREASONCODE_BANNED: MQTTReasonCodes = 138;
pub const MQTTReasonCodes_MQTTREASONCODE_SERVER_SHUTTING_DOWN: MQTTReasonCodes = 139;
pub const MQTTReasonCodes_MQTTREASONCODE_BAD_AUTHENTICATION_METHOD: MQTTReasonCodes = 140;
pub const MQTTReasonCodes_MQTTREASONCODE_KEEP_ALIVE_TIMEOUT: MQTTReasonCodes = 141;
pub const MQTTReasonCodes_MQTTREASONCODE_SESSION_TAKEN_OVER: MQTTReasonCodes = 142;
pub const MQTTReasonCodes_MQTTREASONCODE_TOPIC_FILTER_INVALID: MQTTReasonCodes = 143;
pub const MQTTReasonCodes_MQTTREASONCODE_TOPIC_NAME_INVALID: MQTTReasonCodes = 144;
pub const MQTTReasonCodes_MQTTREASONCODE_PACKET_IDENTIFIER_IN_USE: MQTTReasonCodes = 145;
pub const MQTTReasonCodes_MQTTREASONCODE_PACKET_IDENTIFIER_NOT_FOUND: MQTTReasonCodes = 146;
pub const MQTTReasonCodes_MQTTREASONCODE_RECEIVE_MAXIMUM_EXCEEDED: MQTTReasonCodes = 147;
pub const MQTTReasonCodes_MQTTREASONCODE_TOPIC_ALIAS_INVALID: MQTTReasonCodes = 148;
pub const MQTTReasonCodes_MQTTREASONCODE_PACKET_TOO_LARGE: MQTTReasonCodes = 149;
pub const MQTTReasonCodes_MQTTREASONCODE_MESSAGE_RATE_TOO_HIGH: MQTTReasonCodes = 150;
pub const MQTTReasonCodes_MQTTREASONCODE_QUOTA_EXCEEDED: MQTTReasonCodes = 151;
pub const MQTTReasonCodes_MQTTREASONCODE_ADMINISTRATIVE_ACTION: MQTTReasonCodes = 152;
pub const MQTTReasonCodes_MQTTREASONCODE_PAYLOAD_FORMAT_INVALID: MQTTReasonCodes = 153;
pub const MQTTReasonCodes_MQTTREASONCODE_RETAIN_NOT_SUPPORTED: MQTTReasonCodes = 154;
pub const MQTTReasonCodes_MQTTREASONCODE_QOS_NOT_SUPPORTED: MQTTReasonCodes = 155;
pub const MQTTReasonCodes_MQTTREASONCODE_USE_ANOTHER_SERVER: MQTTReasonCodes = 156;
pub const MQTTReasonCodes_MQTTREASONCODE_SERVER_MOVED: MQTTReasonCodes = 157;
pub const MQTTReasonCodes_MQTTREASONCODE_SHARED_SUBSCRIPTIONS_NOT_SUPPORTED: MQTTReasonCodes = 158;
pub const MQTTReasonCodes_MQTTREASONCODE_CONNECTION_RATE_EXCEEDED: MQTTReasonCodes = 159;
pub const MQTTReasonCodes_MQTTREASONCODE_MAXIMUM_CONNECT_TIME: MQTTReasonCodes = 160;
pub const MQTTReasonCodes_MQTTREASONCODE_SUBSCRIPTION_IDENTIFIERS_NOT_SUPPORTED: MQTTReasonCodes =
    161;
pub const MQTTReasonCodes_MQTTREASONCODE_WILDCARD_SUBSCRIPTIONS_NOT_SUPPORTED: MQTTReasonCodes =
    162;
pub type MQTTReasonCodes = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn MQTTReasonCode_toString(value: MQTTReasonCodes) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTSubscribe_options {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub noLocal: ::std::os::raw::c_uchar,
    pub retainAsPublished: ::std::os::raw::c_uchar,
    pub retainHandling: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTSubscribe_options"][::std::mem::size_of::<MQTTSubscribe_options>() - 12usize];
    ["Alignment of MQTTSubscribe_options"]
        [::std::mem::align_of::<MQTTSubscribe_options>() - 4usize];
    ["Offset of field: MQTTSubscribe_options::struct_id"]
        [::std::mem::offset_of!(MQTTSubscribe_options, struct_id) - 0usize];
    ["Offset of field: MQTTSubscribe_options::struct_version"]
        [::std::mem::offset_of!(MQTTSubscribe_options, struct_version) - 4usize];
    ["Offset of field: MQTTSubscribe_options::noLocal"]
        [::std::mem::offset_of!(MQTTSubscribe_options, noLocal) - 8usize];
    ["Offset of field: MQTTSubscribe_options::retainAsPublished"]
        [::std::mem::offset_of!(MQTTSubscribe_options, retainAsPublished) - 9usize];
    ["Offset of field: MQTTSubscribe_options::retainHandling"]
        [::std::mem::offset_of!(MQTTSubscribe_options, retainHandling) - 10usize];
};
pub type Persistence_open = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut *mut ::std::os::raw::c_void,
        clientID: *const ::std::os::raw::c_char,
        serverURI: *const ::std::os::raw::c_char,
        context: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type Persistence_close = ::std::option::Option<
    unsafe extern "C" fn(handle: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
pub type Persistence_put = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut ::std::os::raw::c_void,
        key: *mut ::std::os::raw::c_char,
        bufcount: ::std::os::raw::c_int,
        buffers: *mut *mut ::std::os::raw::c_char,
        buflens: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type Persistence_get = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut ::std::os::raw::c_void,
        key: *mut ::std::os::raw::c_char,
        buffer: *mut *mut ::std::os::raw::c_char,
        buflen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type Persistence_remove = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut ::std::os::raw::c_void,
        key: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type Persistence_keys = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut ::std::os::raw::c_void,
        keys: *mut *mut *mut ::std::os::raw::c_char,
        nkeys: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type Persistence_clear = ::std::option::Option<
    unsafe extern "C" fn(handle: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
pub type Persistence_containskey = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut ::std::os::raw::c_void,
        key: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTClient_persistence {
    pub context: *mut ::std::os::raw::c_void,
    pub popen: Persistence_open,
    pub pclose: Persistence_close,
    pub pput: Persistence_put,
    pub pget: Persistence_get,
    pub premove: Persistence_remove,
    pub pkeys: Persistence_keys,
    pub pclear: Persistence_clear,
    pub pcontainskey: Persistence_containskey,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTClient_persistence"][::std::mem::size_of::<MQTTClient_persistence>() - 72usize];
    ["Alignment of MQTTClient_persistence"]
        [::std::mem::align_of::<MQTTClient_persistence>() - 8usize];
    ["Offset of field: MQTTClient_persistence::context"]
        [::std::mem::offset_of!(MQTTClient_persistence, context) - 0usize];
    ["Offset of field: MQTTClient_persistence::popen"]
        [::std::mem::offset_of!(MQTTClient_persistence, popen) - 8usize];
    ["Offset of field: MQTTClient_persistence::pclose"]
        [::std::mem::offset_of!(MQTTClient_persistence, pclose) - 16usize];
    ["Offset of field: MQTTClient_persistence::pput"]
        [::std::mem::offset_of!(MQTTClient_persistence, pput) - 24usize];
    ["Offset of field: MQTTClient_persistence::pget"]
        [::std::mem::offset_of!(MQTTClient_persistence, pget) - 32usize];
    ["Offset of field: MQTTClient_persistence::premove"]
        [::std::mem::offset_of!(MQTTClient_persistence, premove) - 40usize];
    ["Offset of field: MQTTClient_persistence::pkeys"]
        [::std::mem::offset_of!(MQTTClient_persistence, pkeys) - 48usize];
    ["Offset of field: MQTTClient_persistence::pclear"]
        [::std::mem::offset_of!(MQTTClient_persistence, pclear) - 56usize];
    ["Offset of field: MQTTClient_persistence::pcontainskey"]
        [::std::mem::offset_of!(MQTTClient_persistence, pcontainskey) - 64usize];
};
pub type MQTTPersistence_beforeWrite = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        bufcount: ::std::os::raw::c_int,
        buffers: *mut *mut ::std::os::raw::c_char,
        buflens: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type MQTTPersistence_afterRead = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        buffer: *mut *mut ::std::os::raw::c_char,
        buflen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_init_options {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub do_openssl_init: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_init_options"][::std::mem::size_of::<MQTTAsync_init_options>() - 12usize];
    ["Alignment of MQTTAsync_init_options"]
        [::std::mem::align_of::<MQTTAsync_init_options>() - 4usize];
    ["Offset of field: MQTTAsync_init_options::struct_id"]
        [::std::mem::offset_of!(MQTTAsync_init_options, struct_id) - 0usize];
    ["Offset of field: MQTTAsync_init_options::struct_version"]
        [::std::mem::offset_of!(MQTTAsync_init_options, struct_version) - 4usize];
    ["Offset of field: MQTTAsync_init_options::do_openssl_init"]
        [::std::mem::offset_of!(MQTTAsync_init_options, do_openssl_init) - 8usize];
};
unsafe extern "C" {
    pub fn MQTTAsync_global_init(inits: *mut MQTTAsync_init_options);
}
pub type MQTTAsync = *mut ::std::os::raw::c_void;
pub type MQTTAsync_token = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_message {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub payloadlen: ::std::os::raw::c_int,
    pub payload: *mut ::std::os::raw::c_void,
    pub qos: ::std::os::raw::c_int,
    pub retained: ::std::os::raw::c_int,
    pub dup: ::std::os::raw::c_int,
    pub msgid: ::std::os::raw::c_int,
    pub properties: MQTTProperties,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_message"][::std::mem::size_of::<MQTTAsync_message>() - 64usize];
    ["Alignment of MQTTAsync_message"][::std::mem::align_of::<MQTTAsync_message>() - 8usize];
    ["Offset of field: MQTTAsync_message::struct_id"]
        [::std::mem::offset_of!(MQTTAsync_message, struct_id) - 0usize];
    ["Offset of field: MQTTAsync_message::struct_version"]
        [::std::mem::offset_of!(MQTTAsync_message, struct_version) - 4usize];
    ["Offset of field: MQTTAsync_message::payloadlen"]
        [::std::mem::offset_of!(MQTTAsync_message, payloadlen) - 8usize];
    ["Offset of field: MQTTAsync_message::payload"]
        [::std::mem::offset_of!(MQTTAsync_message, payload) - 16usize];
    ["Offset of field: MQTTAsync_message::qos"]
        [::std::mem::offset_of!(MQTTAsync_message, qos) - 24usize];
    ["Offset of field: MQTTAsync_message::retained"]
        [::std::mem::offset_of!(MQTTAsync_message, retained) - 28usize];
    ["Offset of field: MQTTAsync_message::dup"]
        [::std::mem::offset_of!(MQTTAsync_message, dup) - 32usize];
    ["Offset of field: MQTTAsync_message::msgid"]
        [::std::mem::offset_of!(MQTTAsync_message, msgid) - 36usize];
    ["Offset of field: MQTTAsync_message::properties"]
        [::std::mem::offset_of!(MQTTAsync_message, properties) - 40usize];
};
pub type MQTTAsync_messageArrived = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        topicName: *mut ::std::os::raw::c_char,
        topicLen: ::std::os::raw::c_int,
        message: *mut MQTTAsync_message,
    ) -> ::std::os::raw::c_int,
>;
pub type MQTTAsync_deliveryComplete = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ::std::os::raw::c_void, token: MQTTAsync_token),
>;
pub type MQTTAsync_connectionLost = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ::std::os::raw::c_void, cause: *mut ::std::os::raw::c_char),
>;
pub type MQTTAsync_connected = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ::std::os::raw::c_void, cause: *mut ::std::os::raw::c_char),
>;
pub type MQTTAsync_disconnected = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        properties: *mut MQTTProperties,
        reasonCode: MQTTReasonCodes,
    ),
>;
unsafe extern "C" {
    pub fn MQTTAsync_setDisconnected(
        handle: MQTTAsync,
        context: *mut ::std::os::raw::c_void,
        co: MQTTAsync_disconnected,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_connectData {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub username: *const ::std::os::raw::c_char,
    pub binarypwd: MQTTAsync_connectData__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_connectData__bindgen_ty_1 {
    pub len: ::std::os::raw::c_int,
    pub data: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_connectData__bindgen_ty_1"]
        [::std::mem::size_of::<MQTTAsync_connectData__bindgen_ty_1>() - 16usize];
    ["Alignment of MQTTAsync_connectData__bindgen_ty_1"]
        [::std::mem::align_of::<MQTTAsync_connectData__bindgen_ty_1>() - 8usize];
    ["Offset of field: MQTTAsync_connectData__bindgen_ty_1::len"]
        [::std::mem::offset_of!(MQTTAsync_connectData__bindgen_ty_1, len) - 0usize];
    ["Offset of field: MQTTAsync_connectData__bindgen_ty_1::data"]
        [::std::mem::offset_of!(MQTTAsync_connectData__bindgen_ty_1, data) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_connectData"][::std::mem::size_of::<MQTTAsync_connectData>() - 32usize];
    ["Alignment of MQTTAsync_connectData"]
        [::std::mem::align_of::<MQTTAsync_connectData>() - 8usize];
    ["Offset of field: MQTTAsync_connectData::struct_id"]
        [::std::mem::offset_of!(MQTTAsync_connectData, struct_id) - 0usize];
    ["Offset of field: MQTTAsync_connectData::struct_version"]
        [::std::mem::offset_of!(MQTTAsync_connectData, struct_version) - 4usize];
    ["Offset of field: MQTTAsync_connectData::username"]
        [::std::mem::offset_of!(MQTTAsync_connectData, username) - 8usize];
    ["Offset of field: MQTTAsync_connectData::binarypwd"]
        [::std::mem::offset_of!(MQTTAsync_connectData, binarypwd) - 16usize];
};
pub type MQTTAsync_updateConnectOptions = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        data: *mut MQTTAsync_connectData,
    ) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn MQTTAsync_setUpdateConnectOptions(
        handle: MQTTAsync,
        context: *mut ::std::os::raw::c_void,
        co: MQTTAsync_updateConnectOptions,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_setBeforePersistenceWrite(
        handle: MQTTAsync,
        context: *mut ::std::os::raw::c_void,
        co: MQTTPersistence_beforeWrite,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_setAfterPersistenceRead(
        handle: MQTTAsync,
        context: *mut ::std::os::raw::c_void,
        co: MQTTPersistence_afterRead,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_failureData {
    pub token: MQTTAsync_token,
    pub code: ::std::os::raw::c_int,
    pub message: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_failureData"][::std::mem::size_of::<MQTTAsync_failureData>() - 16usize];
    ["Alignment of MQTTAsync_failureData"]
        [::std::mem::align_of::<MQTTAsync_failureData>() - 8usize];
    ["Offset of field: MQTTAsync_failureData::token"]
        [::std::mem::offset_of!(MQTTAsync_failureData, token) - 0usize];
    ["Offset of field: MQTTAsync_failureData::code"]
        [::std::mem::offset_of!(MQTTAsync_failureData, code) - 4usize];
    ["Offset of field: MQTTAsync_failureData::message"]
        [::std::mem::offset_of!(MQTTAsync_failureData, message) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_failureData5 {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub token: MQTTAsync_token,
    pub reasonCode: MQTTReasonCodes,
    pub properties: MQTTProperties,
    pub code: ::std::os::raw::c_int,
    pub message: *const ::std::os::raw::c_char,
    pub packet_type: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_failureData5"][::std::mem::size_of::<MQTTAsync_failureData5>() - 64usize];
    ["Alignment of MQTTAsync_failureData5"]
        [::std::mem::align_of::<MQTTAsync_failureData5>() - 8usize];
    ["Offset of field: MQTTAsync_failureData5::struct_id"]
        [::std::mem::offset_of!(MQTTAsync_failureData5, struct_id) - 0usize];
    ["Offset of field: MQTTAsync_failureData5::struct_version"]
        [::std::mem::offset_of!(MQTTAsync_failureData5, struct_version) - 4usize];
    ["Offset of field: MQTTAsync_failureData5::token"]
        [::std::mem::offset_of!(MQTTAsync_failureData5, token) - 8usize];
    ["Offset of field: MQTTAsync_failureData5::reasonCode"]
        [::std::mem::offset_of!(MQTTAsync_failureData5, reasonCode) - 12usize];
    ["Offset of field: MQTTAsync_failureData5::properties"]
        [::std::mem::offset_of!(MQTTAsync_failureData5, properties) - 16usize];
    ["Offset of field: MQTTAsync_failureData5::code"]
        [::std::mem::offset_of!(MQTTAsync_failureData5, code) - 40usize];
    ["Offset of field: MQTTAsync_failureData5::message"]
        [::std::mem::offset_of!(MQTTAsync_failureData5, message) - 48usize];
    ["Offset of field: MQTTAsync_failureData5::packet_type"]
        [::std::mem::offset_of!(MQTTAsync_failureData5, packet_type) - 56usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MQTTAsync_successData {
    pub token: MQTTAsync_token,
    pub alt: MQTTAsync_successData__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MQTTAsync_successData__bindgen_ty_1 {
    pub qos: ::std::os::raw::c_int,
    pub qosList: *mut ::std::os::raw::c_int,
    pub pub_: MQTTAsync_successData__bindgen_ty_1__bindgen_ty_1,
    pub connect: MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_successData__bindgen_ty_1__bindgen_ty_1 {
    pub message: MQTTAsync_message,
    pub destinationName: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_successData__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<MQTTAsync_successData__bindgen_ty_1__bindgen_ty_1>() - 72usize];
    ["Alignment of MQTTAsync_successData__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<MQTTAsync_successData__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: MQTTAsync_successData__bindgen_ty_1__bindgen_ty_1::message"][::std::mem::offset_of!(
        MQTTAsync_successData__bindgen_ty_1__bindgen_ty_1,
        message
    ) - 0usize];
    ["Offset of field: MQTTAsync_successData__bindgen_ty_1__bindgen_ty_1::destinationName"][::std::mem::offset_of!(
        MQTTAsync_successData__bindgen_ty_1__bindgen_ty_1,
        destinationName
    )
        - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2 {
    pub serverURI: *mut ::std::os::raw::c_char,
    pub MQTTVersion: ::std::os::raw::c_int,
    pub sessionPresent: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2>() - 16usize];
    ["Alignment of MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2::serverURI"][::std::mem::offset_of!(
        MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2,
        serverURI
    ) - 0usize];
    ["Offset of field: MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2::MQTTVersion"][::std::mem::offset_of!(
        MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2,
        MQTTVersion
    ) - 8usize];
    ["Offset of field: MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2::sessionPresent"][::std::mem::offset_of!(
        MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2,
        sessionPresent
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_successData__bindgen_ty_1"]
        [::std::mem::size_of::<MQTTAsync_successData__bindgen_ty_1>() - 72usize];
    ["Alignment of MQTTAsync_successData__bindgen_ty_1"]
        [::std::mem::align_of::<MQTTAsync_successData__bindgen_ty_1>() - 8usize];
    ["Offset of field: MQTTAsync_successData__bindgen_ty_1::qos"]
        [::std::mem::offset_of!(MQTTAsync_successData__bindgen_ty_1, qos) - 0usize];
    ["Offset of field: MQTTAsync_successData__bindgen_ty_1::qosList"]
        [::std::mem::offset_of!(MQTTAsync_successData__bindgen_ty_1, qosList) - 0usize];
    ["Offset of field: MQTTAsync_successData__bindgen_ty_1::pub_"]
        [::std::mem::offset_of!(MQTTAsync_successData__bindgen_ty_1, pub_) - 0usize];
    ["Offset of field: MQTTAsync_successData__bindgen_ty_1::connect"]
        [::std::mem::offset_of!(MQTTAsync_successData__bindgen_ty_1, connect) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_successData"][::std::mem::size_of::<MQTTAsync_successData>() - 80usize];
    ["Alignment of MQTTAsync_successData"]
        [::std::mem::align_of::<MQTTAsync_successData>() - 8usize];
    ["Offset of field: MQTTAsync_successData::token"]
        [::std::mem::offset_of!(MQTTAsync_successData, token) - 0usize];
    ["Offset of field: MQTTAsync_successData::alt"]
        [::std::mem::offset_of!(MQTTAsync_successData, alt) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MQTTAsync_successData5 {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub token: MQTTAsync_token,
    pub reasonCode: MQTTReasonCodes,
    pub properties: MQTTProperties,
    pub alt: MQTTAsync_successData5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MQTTAsync_successData5__bindgen_ty_1 {
    pub sub: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_1,
    pub pub_: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_2,
    pub connect: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3,
    pub unsub: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_1 {
    pub reasonCodeCount: ::std::os::raw::c_int,
    pub reasonCodes: *mut MQTTReasonCodes,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_1::reasonCodeCount"][::std::mem::offset_of!(
        MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_1,
        reasonCodeCount
    )
        - 0usize];
    ["Offset of field: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_1::reasonCodes"][::std::mem::offset_of!(
        MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_1,
        reasonCodes
    )
        - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_2 {
    pub message: MQTTAsync_message,
    pub destinationName: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_2>() - 72usize];
    ["Alignment of MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_2::message"][::std::mem::offset_of!(
        MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_2,
        message
    ) - 0usize];
    ["Offset of field: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_2::destinationName"][::std::mem::offset_of!(
        MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_2,
        destinationName
    )
        - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3 {
    pub serverURI: *mut ::std::os::raw::c_char,
    pub MQTTVersion: ::std::os::raw::c_int,
    pub sessionPresent: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3>() - 16usize];
    ["Alignment of MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3::serverURI"][::std::mem::offset_of!(
        MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3,
        serverURI
    ) - 0usize];
    ["Offset of field: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3::MQTTVersion"][::std::mem::offset_of!(
        MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3,
        MQTTVersion
    )
        - 8usize];
    ["Offset of field: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3::sessionPresent"][::std::mem::offset_of!(
        MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3,
        sessionPresent
    )
        - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_4 {
    pub reasonCodeCount: ::std::os::raw::c_int,
    pub reasonCodes: *mut MQTTReasonCodes,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_4>() - 16usize];
    ["Alignment of MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Offset of field: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_4::reasonCodeCount"][::std::mem::offset_of!(
        MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_4,
        reasonCodeCount
    )
        - 0usize];
    ["Offset of field: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_4::reasonCodes"][::std::mem::offset_of!(
        MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_4,
        reasonCodes
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_successData5__bindgen_ty_1"]
        [::std::mem::size_of::<MQTTAsync_successData5__bindgen_ty_1>() - 72usize];
    ["Alignment of MQTTAsync_successData5__bindgen_ty_1"]
        [::std::mem::align_of::<MQTTAsync_successData5__bindgen_ty_1>() - 8usize];
    ["Offset of field: MQTTAsync_successData5__bindgen_ty_1::sub"]
        [::std::mem::offset_of!(MQTTAsync_successData5__bindgen_ty_1, sub) - 0usize];
    ["Offset of field: MQTTAsync_successData5__bindgen_ty_1::pub_"]
        [::std::mem::offset_of!(MQTTAsync_successData5__bindgen_ty_1, pub_) - 0usize];
    ["Offset of field: MQTTAsync_successData5__bindgen_ty_1::connect"]
        [::std::mem::offset_of!(MQTTAsync_successData5__bindgen_ty_1, connect) - 0usize];
    ["Offset of field: MQTTAsync_successData5__bindgen_ty_1::unsub"]
        [::std::mem::offset_of!(MQTTAsync_successData5__bindgen_ty_1, unsub) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_successData5"][::std::mem::size_of::<MQTTAsync_successData5>() - 112usize];
    ["Alignment of MQTTAsync_successData5"]
        [::std::mem::align_of::<MQTTAsync_successData5>() - 8usize];
    ["Offset of field: MQTTAsync_successData5::struct_id"]
        [::std::mem::offset_of!(MQTTAsync_successData5, struct_id) - 0usize];
    ["Offset of field: MQTTAsync_successData5::struct_version"]
        [::std::mem::offset_of!(MQTTAsync_successData5, struct_version) - 4usize];
    ["Offset of field: MQTTAsync_successData5::token"]
        [::std::mem::offset_of!(MQTTAsync_successData5, token) - 8usize];
    ["Offset of field: MQTTAsync_successData5::reasonCode"]
        [::std::mem::offset_of!(MQTTAsync_successData5, reasonCode) - 12usize];
    ["Offset of field: MQTTAsync_successData5::properties"]
        [::std::mem::offset_of!(MQTTAsync_successData5, properties) - 16usize];
    ["Offset of field: MQTTAsync_successData5::alt"]
        [::std::mem::offset_of!(MQTTAsync_successData5, alt) - 40usize];
};
pub type MQTTAsync_onSuccess = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        response: *mut MQTTAsync_successData,
    ),
>;
pub type MQTTAsync_onSuccess5 = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        response: *mut MQTTAsync_successData5,
    ),
>;
pub type MQTTAsync_onFailure = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        response: *mut MQTTAsync_failureData,
    ),
>;
pub type MQTTAsync_onFailure5 = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        response: *mut MQTTAsync_failureData5,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_responseOptions {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub onSuccess: MQTTAsync_onSuccess,
    pub onFailure: MQTTAsync_onFailure,
    pub context: *mut ::std::os::raw::c_void,
    pub token: MQTTAsync_token,
    pub onSuccess5: MQTTAsync_onSuccess5,
    pub onFailure5: MQTTAsync_onFailure5,
    pub properties: MQTTProperties,
    pub subscribeOptions: MQTTSubscribe_options,
    pub subscribeOptionsCount: ::std::os::raw::c_int,
    pub subscribeOptionsList: *mut MQTTSubscribe_options,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_responseOptions"]
        [::std::mem::size_of::<MQTTAsync_responseOptions>() - 104usize];
    ["Alignment of MQTTAsync_responseOptions"]
        [::std::mem::align_of::<MQTTAsync_responseOptions>() - 8usize];
    ["Offset of field: MQTTAsync_responseOptions::struct_id"]
        [::std::mem::offset_of!(MQTTAsync_responseOptions, struct_id) - 0usize];
    ["Offset of field: MQTTAsync_responseOptions::struct_version"]
        [::std::mem::offset_of!(MQTTAsync_responseOptions, struct_version) - 4usize];
    ["Offset of field: MQTTAsync_responseOptions::onSuccess"]
        [::std::mem::offset_of!(MQTTAsync_responseOptions, onSuccess) - 8usize];
    ["Offset of field: MQTTAsync_responseOptions::onFailure"]
        [::std::mem::offset_of!(MQTTAsync_responseOptions, onFailure) - 16usize];
    ["Offset of field: MQTTAsync_responseOptions::context"]
        [::std::mem::offset_of!(MQTTAsync_responseOptions, context) - 24usize];
    ["Offset of field: MQTTAsync_responseOptions::token"]
        [::std::mem::offset_of!(MQTTAsync_responseOptions, token) - 32usize];
    ["Offset of field: MQTTAsync_responseOptions::onSuccess5"]
        [::std::mem::offset_of!(MQTTAsync_responseOptions, onSuccess5) - 40usize];
    ["Offset of field: MQTTAsync_responseOptions::onFailure5"]
        [::std::mem::offset_of!(MQTTAsync_responseOptions, onFailure5) - 48usize];
    ["Offset of field: MQTTAsync_responseOptions::properties"]
        [::std::mem::offset_of!(MQTTAsync_responseOptions, properties) - 56usize];
    ["Offset of field: MQTTAsync_responseOptions::subscribeOptions"]
        [::std::mem::offset_of!(MQTTAsync_responseOptions, subscribeOptions) - 80usize];
    ["Offset of field: MQTTAsync_responseOptions::subscribeOptionsCount"]
        [::std::mem::offset_of!(MQTTAsync_responseOptions, subscribeOptionsCount) - 92usize];
    ["Offset of field: MQTTAsync_responseOptions::subscribeOptionsList"]
        [::std::mem::offset_of!(MQTTAsync_responseOptions, subscribeOptionsList) - 96usize];
};
pub type MQTTAsync_callOptions = MQTTAsync_responseOptions;
unsafe extern "C" {
    pub fn MQTTAsync_setCallbacks(
        handle: MQTTAsync,
        context: *mut ::std::os::raw::c_void,
        cl: MQTTAsync_connectionLost,
        ma: MQTTAsync_messageArrived,
        dc: MQTTAsync_deliveryComplete,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_setConnectionLostCallback(
        handle: MQTTAsync,
        context: *mut ::std::os::raw::c_void,
        cl: MQTTAsync_connectionLost,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_setMessageArrivedCallback(
        handle: MQTTAsync,
        context: *mut ::std::os::raw::c_void,
        ma: MQTTAsync_messageArrived,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_setDeliveryCompleteCallback(
        handle: MQTTAsync,
        context: *mut ::std::os::raw::c_void,
        dc: MQTTAsync_deliveryComplete,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_setConnected(
        handle: MQTTAsync,
        context: *mut ::std::os::raw::c_void,
        co: MQTTAsync_connected,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_reconnect(handle: MQTTAsync) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_create(
        handle: *mut MQTTAsync,
        serverURI: *const ::std::os::raw::c_char,
        clientId: *const ::std::os::raw::c_char,
        persistence_type: ::std::os::raw::c_int,
        persistence_context: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_createOptions {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub sendWhileDisconnected: ::std::os::raw::c_int,
    pub maxBufferedMessages: ::std::os::raw::c_int,
    pub MQTTVersion: ::std::os::raw::c_int,
    pub allowDisconnectedSendAtAnyTime: ::std::os::raw::c_int,
    pub deleteOldestMessages: ::std::os::raw::c_int,
    pub restoreMessages: ::std::os::raw::c_int,
    pub persistQoS0: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_createOptions"][::std::mem::size_of::<MQTTAsync_createOptions>() - 36usize];
    ["Alignment of MQTTAsync_createOptions"]
        [::std::mem::align_of::<MQTTAsync_createOptions>() - 4usize];
    ["Offset of field: MQTTAsync_createOptions::struct_id"]
        [::std::mem::offset_of!(MQTTAsync_createOptions, struct_id) - 0usize];
    ["Offset of field: MQTTAsync_createOptions::struct_version"]
        [::std::mem::offset_of!(MQTTAsync_createOptions, struct_version) - 4usize];
    ["Offset of field: MQTTAsync_createOptions::sendWhileDisconnected"]
        [::std::mem::offset_of!(MQTTAsync_createOptions, sendWhileDisconnected) - 8usize];
    ["Offset of field: MQTTAsync_createOptions::maxBufferedMessages"]
        [::std::mem::offset_of!(MQTTAsync_createOptions, maxBufferedMessages) - 12usize];
    ["Offset of field: MQTTAsync_createOptions::MQTTVersion"]
        [::std::mem::offset_of!(MQTTAsync_createOptions, MQTTVersion) - 16usize];
    ["Offset of field: MQTTAsync_createOptions::allowDisconnectedSendAtAnyTime"]
        [::std::mem::offset_of!(MQTTAsync_createOptions, allowDisconnectedSendAtAnyTime) - 20usize];
    ["Offset of field: MQTTAsync_createOptions::deleteOldestMessages"]
        [::std::mem::offset_of!(MQTTAsync_createOptions, deleteOldestMessages) - 24usize];
    ["Offset of field: MQTTAsync_createOptions::restoreMessages"]
        [::std::mem::offset_of!(MQTTAsync_createOptions, restoreMessages) - 28usize];
    ["Offset of field: MQTTAsync_createOptions::persistQoS0"]
        [::std::mem::offset_of!(MQTTAsync_createOptions, persistQoS0) - 32usize];
};
unsafe extern "C" {
    pub fn MQTTAsync_createWithOptions(
        handle: *mut MQTTAsync,
        serverURI: *const ::std::os::raw::c_char,
        clientId: *const ::std::os::raw::c_char,
        persistence_type: ::std::os::raw::c_int,
        persistence_context: *mut ::std::os::raw::c_void,
        options: *mut MQTTAsync_createOptions,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_willOptions {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub topicName: *const ::std::os::raw::c_char,
    pub message: *const ::std::os::raw::c_char,
    pub retained: ::std::os::raw::c_int,
    pub qos: ::std::os::raw::c_int,
    pub payload: MQTTAsync_willOptions__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_willOptions__bindgen_ty_1 {
    pub len: ::std::os::raw::c_int,
    pub data: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_willOptions__bindgen_ty_1"]
        [::std::mem::size_of::<MQTTAsync_willOptions__bindgen_ty_1>() - 16usize];
    ["Alignment of MQTTAsync_willOptions__bindgen_ty_1"]
        [::std::mem::align_of::<MQTTAsync_willOptions__bindgen_ty_1>() - 8usize];
    ["Offset of field: MQTTAsync_willOptions__bindgen_ty_1::len"]
        [::std::mem::offset_of!(MQTTAsync_willOptions__bindgen_ty_1, len) - 0usize];
    ["Offset of field: MQTTAsync_willOptions__bindgen_ty_1::data"]
        [::std::mem::offset_of!(MQTTAsync_willOptions__bindgen_ty_1, data) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_willOptions"][::std::mem::size_of::<MQTTAsync_willOptions>() - 48usize];
    ["Alignment of MQTTAsync_willOptions"]
        [::std::mem::align_of::<MQTTAsync_willOptions>() - 8usize];
    ["Offset of field: MQTTAsync_willOptions::struct_id"]
        [::std::mem::offset_of!(MQTTAsync_willOptions, struct_id) - 0usize];
    ["Offset of field: MQTTAsync_willOptions::struct_version"]
        [::std::mem::offset_of!(MQTTAsync_willOptions, struct_version) - 4usize];
    ["Offset of field: MQTTAsync_willOptions::topicName"]
        [::std::mem::offset_of!(MQTTAsync_willOptions, topicName) - 8usize];
    ["Offset of field: MQTTAsync_willOptions::message"]
        [::std::mem::offset_of!(MQTTAsync_willOptions, message) - 16usize];
    ["Offset of field: MQTTAsync_willOptions::retained"]
        [::std::mem::offset_of!(MQTTAsync_willOptions, retained) - 24usize];
    ["Offset of field: MQTTAsync_willOptions::qos"]
        [::std::mem::offset_of!(MQTTAsync_willOptions, qos) - 28usize];
    ["Offset of field: MQTTAsync_willOptions::payload"]
        [::std::mem::offset_of!(MQTTAsync_willOptions, payload) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_SSLOptions {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub trustStore: *const ::std::os::raw::c_char,
    pub keyStore: *const ::std::os::raw::c_char,
    pub privateKey: *const ::std::os::raw::c_char,
    pub privateKeyPassword: *const ::std::os::raw::c_char,
    pub enabledCipherSuites: *const ::std::os::raw::c_char,
    pub enableServerCertAuth: ::std::os::raw::c_int,
    pub sslVersion: ::std::os::raw::c_int,
    pub verify: ::std::os::raw::c_int,
    pub CApath: *const ::std::os::raw::c_char,
    pub ssl_error_cb: ::std::option::Option<
        unsafe extern "C" fn(
            str_: *const ::std::os::raw::c_char,
            len: usize,
            u: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub ssl_error_context: *mut ::std::os::raw::c_void,
    pub ssl_psk_cb: ::std::option::Option<
        unsafe extern "C" fn(
            hint: *const ::std::os::raw::c_char,
            identity: *mut ::std::os::raw::c_char,
            max_identity_len: ::std::os::raw::c_uint,
            psk: *mut ::std::os::raw::c_uchar,
            max_psk_len: ::std::os::raw::c_uint,
            u: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_uint,
    >,
    pub ssl_psk_context: *mut ::std::os::raw::c_void,
    pub disableDefaultTrustStore: ::std::os::raw::c_int,
    pub protos: *const ::std::os::raw::c_uchar,
    pub protos_len: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_SSLOptions"][::std::mem::size_of::<MQTTAsync_SSLOptions>() - 128usize];
    ["Alignment of MQTTAsync_SSLOptions"][::std::mem::align_of::<MQTTAsync_SSLOptions>() - 8usize];
    ["Offset of field: MQTTAsync_SSLOptions::struct_id"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, struct_id) - 0usize];
    ["Offset of field: MQTTAsync_SSLOptions::struct_version"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, struct_version) - 4usize];
    ["Offset of field: MQTTAsync_SSLOptions::trustStore"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, trustStore) - 8usize];
    ["Offset of field: MQTTAsync_SSLOptions::keyStore"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, keyStore) - 16usize];
    ["Offset of field: MQTTAsync_SSLOptions::privateKey"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, privateKey) - 24usize];
    ["Offset of field: MQTTAsync_SSLOptions::privateKeyPassword"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, privateKeyPassword) - 32usize];
    ["Offset of field: MQTTAsync_SSLOptions::enabledCipherSuites"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, enabledCipherSuites) - 40usize];
    ["Offset of field: MQTTAsync_SSLOptions::enableServerCertAuth"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, enableServerCertAuth) - 48usize];
    ["Offset of field: MQTTAsync_SSLOptions::sslVersion"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, sslVersion) - 52usize];
    ["Offset of field: MQTTAsync_SSLOptions::verify"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, verify) - 56usize];
    ["Offset of field: MQTTAsync_SSLOptions::CApath"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, CApath) - 64usize];
    ["Offset of field: MQTTAsync_SSLOptions::ssl_error_cb"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, ssl_error_cb) - 72usize];
    ["Offset of field: MQTTAsync_SSLOptions::ssl_error_context"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, ssl_error_context) - 80usize];
    ["Offset of field: MQTTAsync_SSLOptions::ssl_psk_cb"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, ssl_psk_cb) - 88usize];
    ["Offset of field: MQTTAsync_SSLOptions::ssl_psk_context"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, ssl_psk_context) - 96usize];
    ["Offset of field: MQTTAsync_SSLOptions::disableDefaultTrustStore"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, disableDefaultTrustStore) - 104usize];
    ["Offset of field: MQTTAsync_SSLOptions::protos"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, protos) - 112usize];
    ["Offset of field: MQTTAsync_SSLOptions::protos_len"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, protos_len) - 120usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_nameValue {
    pub name: *const ::std::os::raw::c_char,
    pub value: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_nameValue"][::std::mem::size_of::<MQTTAsync_nameValue>() - 16usize];
    ["Alignment of MQTTAsync_nameValue"][::std::mem::align_of::<MQTTAsync_nameValue>() - 8usize];
    ["Offset of field: MQTTAsync_nameValue::name"]
        [::std::mem::offset_of!(MQTTAsync_nameValue, name) - 0usize];
    ["Offset of field: MQTTAsync_nameValue::value"]
        [::std::mem::offset_of!(MQTTAsync_nameValue, value) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_connectOptions {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub keepAliveInterval: ::std::os::raw::c_int,
    pub cleansession: ::std::os::raw::c_int,
    pub maxInflight: ::std::os::raw::c_int,
    pub will: *mut MQTTAsync_willOptions,
    pub username: *const ::std::os::raw::c_char,
    pub password: *const ::std::os::raw::c_char,
    pub connectTimeout: ::std::os::raw::c_int,
    pub retryInterval: ::std::os::raw::c_int,
    pub ssl: *mut MQTTAsync_SSLOptions,
    pub onSuccess: MQTTAsync_onSuccess,
    pub onFailure: MQTTAsync_onFailure,
    pub context: *mut ::std::os::raw::c_void,
    pub serverURIcount: ::std::os::raw::c_int,
    pub serverURIs: *const *mut ::std::os::raw::c_char,
    pub MQTTVersion: ::std::os::raw::c_int,
    pub automaticReconnect: ::std::os::raw::c_int,
    pub minRetryInterval: ::std::os::raw::c_int,
    pub maxRetryInterval: ::std::os::raw::c_int,
    pub binarypwd: MQTTAsync_connectOptions__bindgen_ty_1,
    pub cleanstart: ::std::os::raw::c_int,
    pub connectProperties: *mut MQTTProperties,
    pub willProperties: *mut MQTTProperties,
    pub onSuccess5: MQTTAsync_onSuccess5,
    pub onFailure5: MQTTAsync_onFailure5,
    pub httpHeaders: *const MQTTAsync_nameValue,
    pub httpProxy: *const ::std::os::raw::c_char,
    pub httpsProxy: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_connectOptions__bindgen_ty_1 {
    pub len: ::std::os::raw::c_int,
    pub data: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_connectOptions__bindgen_ty_1"]
        [::std::mem::size_of::<MQTTAsync_connectOptions__bindgen_ty_1>() - 16usize];
    ["Alignment of MQTTAsync_connectOptions__bindgen_ty_1"]
        [::std::mem::align_of::<MQTTAsync_connectOptions__bindgen_ty_1>() - 8usize];
    ["Offset of field: MQTTAsync_connectOptions__bindgen_ty_1::len"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions__bindgen_ty_1, len) - 0usize];
    ["Offset of field: MQTTAsync_connectOptions__bindgen_ty_1::data"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions__bindgen_ty_1, data) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_connectOptions"]
        [::std::mem::size_of::<MQTTAsync_connectOptions>() - 200usize];
    ["Alignment of MQTTAsync_connectOptions"]
        [::std::mem::align_of::<MQTTAsync_connectOptions>() - 8usize];
    ["Offset of field: MQTTAsync_connectOptions::struct_id"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, struct_id) - 0usize];
    ["Offset of field: MQTTAsync_connectOptions::struct_version"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, struct_version) - 4usize];
    ["Offset of field: MQTTAsync_connectOptions::keepAliveInterval"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, keepAliveInterval) - 8usize];
    ["Offset of field: MQTTAsync_connectOptions::cleansession"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, cleansession) - 12usize];
    ["Offset of field: MQTTAsync_connectOptions::maxInflight"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, maxInflight) - 16usize];
    ["Offset of field: MQTTAsync_connectOptions::will"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, will) - 24usize];
    ["Offset of field: MQTTAsync_connectOptions::username"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, username) - 32usize];
    ["Offset of field: MQTTAsync_connectOptions::password"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, password) - 40usize];
    ["Offset of field: MQTTAsync_connectOptions::connectTimeout"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, connectTimeout) - 48usize];
    ["Offset of field: MQTTAsync_connectOptions::retryInterval"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, retryInterval) - 52usize];
    ["Offset of field: MQTTAsync_connectOptions::ssl"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, ssl) - 56usize];
    ["Offset of field: MQTTAsync_connectOptions::onSuccess"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, onSuccess) - 64usize];
    ["Offset of field: MQTTAsync_connectOptions::onFailure"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, onFailure) - 72usize];
    ["Offset of field: MQTTAsync_connectOptions::context"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, context) - 80usize];
    ["Offset of field: MQTTAsync_connectOptions::serverURIcount"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, serverURIcount) - 88usize];
    ["Offset of field: MQTTAsync_connectOptions::serverURIs"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, serverURIs) - 96usize];
    ["Offset of field: MQTTAsync_connectOptions::MQTTVersion"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, MQTTVersion) - 104usize];
    ["Offset of field: MQTTAsync_connectOptions::automaticReconnect"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, automaticReconnect) - 108usize];
    ["Offset of field: MQTTAsync_connectOptions::minRetryInterval"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, minRetryInterval) - 112usize];
    ["Offset of field: MQTTAsync_connectOptions::maxRetryInterval"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, maxRetryInterval) - 116usize];
    ["Offset of field: MQTTAsync_connectOptions::binarypwd"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, binarypwd) - 120usize];
    ["Offset of field: MQTTAsync_connectOptions::cleanstart"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, cleanstart) - 136usize];
    ["Offset of field: MQTTAsync_connectOptions::connectProperties"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, connectProperties) - 144usize];
    ["Offset of field: MQTTAsync_connectOptions::willProperties"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, willProperties) - 152usize];
    ["Offset of field: MQTTAsync_connectOptions::onSuccess5"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, onSuccess5) - 160usize];
    ["Offset of field: MQTTAsync_connectOptions::onFailure5"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, onFailure5) - 168usize];
    ["Offset of field: MQTTAsync_connectOptions::httpHeaders"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, httpHeaders) - 176usize];
    ["Offset of field: MQTTAsync_connectOptions::httpProxy"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, httpProxy) - 184usize];
    ["Offset of field: MQTTAsync_connectOptions::httpsProxy"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, httpsProxy) - 192usize];
};
unsafe extern "C" {
    pub fn MQTTAsync_connect(
        handle: MQTTAsync,
        options: *const MQTTAsync_connectOptions,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_disconnectOptions {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub timeout: ::std::os::raw::c_int,
    pub onSuccess: MQTTAsync_onSuccess,
    pub onFailure: MQTTAsync_onFailure,
    pub context: *mut ::std::os::raw::c_void,
    pub properties: MQTTProperties,
    pub reasonCode: MQTTReasonCodes,
    pub onSuccess5: MQTTAsync_onSuccess5,
    pub onFailure5: MQTTAsync_onFailure5,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_disconnectOptions"]
        [::std::mem::size_of::<MQTTAsync_disconnectOptions>() - 88usize];
    ["Alignment of MQTTAsync_disconnectOptions"]
        [::std::mem::align_of::<MQTTAsync_disconnectOptions>() - 8usize];
    ["Offset of field: MQTTAsync_disconnectOptions::struct_id"]
        [::std::mem::offset_of!(MQTTAsync_disconnectOptions, struct_id) - 0usize];
    ["Offset of field: MQTTAsync_disconnectOptions::struct_version"]
        [::std::mem::offset_of!(MQTTAsync_disconnectOptions, struct_version) - 4usize];
    ["Offset of field: MQTTAsync_disconnectOptions::timeout"]
        [::std::mem::offset_of!(MQTTAsync_disconnectOptions, timeout) - 8usize];
    ["Offset of field: MQTTAsync_disconnectOptions::onSuccess"]
        [::std::mem::offset_of!(MQTTAsync_disconnectOptions, onSuccess) - 16usize];
    ["Offset of field: MQTTAsync_disconnectOptions::onFailure"]
        [::std::mem::offset_of!(MQTTAsync_disconnectOptions, onFailure) - 24usize];
    ["Offset of field: MQTTAsync_disconnectOptions::context"]
        [::std::mem::offset_of!(MQTTAsync_disconnectOptions, context) - 32usize];
    ["Offset of field: MQTTAsync_disconnectOptions::properties"]
        [::std::mem::offset_of!(MQTTAsync_disconnectOptions, properties) - 40usize];
    ["Offset of field: MQTTAsync_disconnectOptions::reasonCode"]
        [::std::mem::offset_of!(MQTTAsync_disconnectOptions, reasonCode) - 64usize];
    ["Offset of field: MQTTAsync_disconnectOptions::onSuccess5"]
        [::std::mem::offset_of!(MQTTAsync_disconnectOptions, onSuccess5) - 72usize];
    ["Offset of field: MQTTAsync_disconnectOptions::onFailure5"]
        [::std::mem::offset_of!(MQTTAsync_disconnectOptions, onFailure5) - 80usize];
};
unsafe extern "C" {
    pub fn MQTTAsync_disconnect(
        handle: MQTTAsync,
        options: *const MQTTAsync_disconnectOptions,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_isConnected(handle: MQTTAsync) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_subscribe(
        handle: MQTTAsync,
        topic: *const ::std::os::raw::c_char,
        qos: ::std::os::raw::c_int,
        response: *mut MQTTAsync_responseOptions,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_subscribeMany(
        handle: MQTTAsync,
        count: ::std::os::raw::c_int,
        topic: *const *mut ::std::os::raw::c_char,
        qos: *const ::std::os::raw::c_int,
        response: *mut MQTTAsync_responseOptions,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_unsubscribe(
        handle: MQTTAsync,
        topic: *const ::std::os::raw::c_char,
        response: *mut MQTTAsync_responseOptions,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_unsubscribeMany(
        handle: MQTTAsync,
        count: ::std::os::raw::c_int,
        topic: *const *mut ::std::os::raw::c_char,
        response: *mut MQTTAsync_responseOptions,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_send(
        handle: MQTTAsync,
        destinationName: *const ::std::os::raw::c_char,
        payloadlen: ::std::os::raw::c_int,
        payload: *const ::std::os::raw::c_void,
        qos: ::std::os::raw::c_int,
        retained: ::std::os::raw::c_int,
        response: *mut MQTTAsync_responseOptions,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_sendMessage(
        handle: MQTTAsync,
        destinationName: *const ::std::os::raw::c_char,
        msg: *const MQTTAsync_message,
        response: *mut MQTTAsync_responseOptions,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_getPendingTokens(
        handle: MQTTAsync,
        tokens: *mut *mut MQTTAsync_token,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_isComplete(handle: MQTTAsync, token: MQTTAsync_token)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_waitForCompletion(
        handle: MQTTAsync,
        token: MQTTAsync_token,
        timeout: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_freeMessage(msg: *mut *mut MQTTAsync_message);
}
unsafe extern "C" {
    pub fn MQTTAsync_free(ptr: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn MQTTAsync_malloc(size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn MQTTAsync_destroy(handle: *mut MQTTAsync);
}
pub const MQTTASYNC_TRACE_LEVELS_MQTTASYNC_TRACE_MAXIMUM: MQTTASYNC_TRACE_LEVELS = 1;
pub const MQTTASYNC_TRACE_LEVELS_MQTTASYNC_TRACE_MEDIUM: MQTTASYNC_TRACE_LEVELS = 2;
pub const MQTTASYNC_TRACE_LEVELS_MQTTASYNC_TRACE_MINIMUM: MQTTASYNC_TRACE_LEVELS = 3;
pub const MQTTASYNC_TRACE_LEVELS_MQTTASYNC_TRACE_PROTOCOL: MQTTASYNC_TRACE_LEVELS = 4;
pub const MQTTASYNC_TRACE_LEVELS_MQTTASYNC_TRACE_ERROR: MQTTASYNC_TRACE_LEVELS = 5;
pub const MQTTASYNC_TRACE_LEVELS_MQTTASYNC_TRACE_SEVERE: MQTTASYNC_TRACE_LEVELS = 6;
pub const MQTTASYNC_TRACE_LEVELS_MQTTASYNC_TRACE_FATAL: MQTTASYNC_TRACE_LEVELS = 7;
pub type MQTTASYNC_TRACE_LEVELS = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn MQTTAsync_setTraceLevel(level: MQTTASYNC_TRACE_LEVELS);
}
pub type MQTTAsync_traceCallback = ::std::option::Option<
    unsafe extern "C" fn(level: MQTTASYNC_TRACE_LEVELS, message: *mut ::std::os::raw::c_char),
>;
unsafe extern "C" {
    pub fn MQTTAsync_setTraceCallback(callback: MQTTAsync_traceCallback);
}
unsafe extern "C" {
    pub fn MQTTAsync_getVersionInfo() -> *mut MQTTAsync_nameValue;
}
unsafe extern "C" {
    pub fn MQTTAsync_strerror(code: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
