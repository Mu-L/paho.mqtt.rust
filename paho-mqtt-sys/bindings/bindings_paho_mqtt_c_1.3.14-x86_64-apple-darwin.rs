/* automatically generated by rust-bindgen 0.71.1 */

pub const __has_safe_buffers: u32 = 1;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &[u8; 9] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &[u8; 6] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_VISIONOS: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_5: u32 = 101405;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __MAC_12_4: u32 = 120400;
pub const __MAC_12_5: u32 = 120500;
pub const __MAC_12_6: u32 = 120600;
pub const __MAC_12_7: u32 = 120700;
pub const __MAC_13_0: u32 = 130000;
pub const __MAC_13_1: u32 = 130100;
pub const __MAC_13_2: u32 = 130200;
pub const __MAC_13_3: u32 = 130300;
pub const __MAC_13_4: u32 = 130400;
pub const __MAC_13_5: u32 = 130500;
pub const __MAC_13_6: u32 = 130600;
pub const __MAC_14_0: u32 = 140000;
pub const __MAC_14_1: u32 = 140100;
pub const __MAC_14_2: u32 = 140200;
pub const __MAC_14_3: u32 = 140300;
pub const __MAC_14_4: u32 = 140400;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_4: u32 = 140400;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __IPHONE_15_5: u32 = 150500;
pub const __IPHONE_15_6: u32 = 150600;
pub const __IPHONE_15_7: u32 = 150700;
pub const __IPHONE_15_8: u32 = 150800;
pub const __IPHONE_16_0: u32 = 160000;
pub const __IPHONE_16_1: u32 = 160100;
pub const __IPHONE_16_2: u32 = 160200;
pub const __IPHONE_16_3: u32 = 160300;
pub const __IPHONE_16_4: u32 = 160400;
pub const __IPHONE_16_5: u32 = 160500;
pub const __IPHONE_16_6: u32 = 160600;
pub const __IPHONE_16_7: u32 = 160700;
pub const __IPHONE_17_0: u32 = 170000;
pub const __IPHONE_17_1: u32 = 170100;
pub const __IPHONE_17_2: u32 = 170200;
pub const __IPHONE_17_3: u32 = 170300;
pub const __IPHONE_17_4: u32 = 170400;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const __WATCHOS_8_6: u32 = 80600;
pub const __WATCHOS_8_7: u32 = 80700;
pub const __WATCHOS_8_8: u32 = 80800;
pub const __WATCHOS_9_0: u32 = 90000;
pub const __WATCHOS_9_1: u32 = 90100;
pub const __WATCHOS_9_2: u32 = 90200;
pub const __WATCHOS_9_3: u32 = 90300;
pub const __WATCHOS_9_4: u32 = 90400;
pub const __WATCHOS_9_5: u32 = 90500;
pub const __WATCHOS_9_6: u32 = 90600;
pub const __WATCHOS_10_0: u32 = 100000;
pub const __WATCHOS_10_1: u32 = 100100;
pub const __WATCHOS_10_2: u32 = 100200;
pub const __WATCHOS_10_3: u32 = 100300;
pub const __WATCHOS_10_4: u32 = 100400;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __TVOS_15_5: u32 = 150500;
pub const __TVOS_15_6: u32 = 150600;
pub const __TVOS_16_0: u32 = 160000;
pub const __TVOS_16_1: u32 = 160100;
pub const __TVOS_16_2: u32 = 160200;
pub const __TVOS_16_3: u32 = 160300;
pub const __TVOS_16_4: u32 = 160400;
pub const __TVOS_16_5: u32 = 160500;
pub const __TVOS_16_6: u32 = 160600;
pub const __TVOS_17_0: u32 = 170000;
pub const __TVOS_17_1: u32 = 170100;
pub const __TVOS_17_2: u32 = 170200;
pub const __TVOS_17_3: u32 = 170300;
pub const __TVOS_17_4: u32 = 170400;
pub const __BRIDGEOS_2_0: u32 = 20000;
pub const __BRIDGEOS_3_0: u32 = 30000;
pub const __BRIDGEOS_3_1: u32 = 30100;
pub const __BRIDGEOS_3_4: u32 = 30400;
pub const __BRIDGEOS_4_0: u32 = 40000;
pub const __BRIDGEOS_4_1: u32 = 40100;
pub const __BRIDGEOS_5_0: u32 = 50000;
pub const __BRIDGEOS_5_1: u32 = 50100;
pub const __BRIDGEOS_5_3: u32 = 50300;
pub const __BRIDGEOS_6_0: u32 = 60000;
pub const __BRIDGEOS_6_2: u32 = 60200;
pub const __BRIDGEOS_6_4: u32 = 60400;
pub const __BRIDGEOS_6_5: u32 = 60500;
pub const __BRIDGEOS_6_6: u32 = 60600;
pub const __BRIDGEOS_7_0: u32 = 70000;
pub const __BRIDGEOS_7_1: u32 = 70100;
pub const __BRIDGEOS_7_2: u32 = 70200;
pub const __BRIDGEOS_7_3: u32 = 70300;
pub const __BRIDGEOS_7_4: u32 = 70400;
pub const __BRIDGEOS_7_6: u32 = 70600;
pub const __BRIDGEOS_8_0: u32 = 80000;
pub const __BRIDGEOS_8_1: u32 = 80100;
pub const __BRIDGEOS_8_2: u32 = 80200;
pub const __BRIDGEOS_8_3: u32 = 80300;
pub const __BRIDGEOS_8_4: u32 = 80400;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __DRIVERKIT_22_0: u32 = 220000;
pub const __DRIVERKIT_22_4: u32 = 220400;
pub const __DRIVERKIT_22_5: u32 = 220500;
pub const __DRIVERKIT_22_6: u32 = 220600;
pub const __DRIVERKIT_23_0: u32 = 230000;
pub const __DRIVERKIT_23_1: u32 = 230100;
pub const __DRIVERKIT_23_2: u32 = 230200;
pub const __DRIVERKIT_23_3: u32 = 230300;
pub const __DRIVERKIT_23_4: u32 = 230400;
pub const __VISIONOS_1_0: u32 = 10000;
pub const __VISIONOS_1_1: u32 = 10100;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_5: u32 = 101405;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_15_4: u32 = 101504;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_11_1: u32 = 110100;
pub const MAC_OS_VERSION_11_3: u32 = 110300;
pub const MAC_OS_VERSION_11_4: u32 = 110400;
pub const MAC_OS_VERSION_11_5: u32 = 110500;
pub const MAC_OS_VERSION_11_6: u32 = 110600;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const MAC_OS_VERSION_12_1: u32 = 120100;
pub const MAC_OS_VERSION_12_2: u32 = 120200;
pub const MAC_OS_VERSION_12_3: u32 = 120300;
pub const MAC_OS_VERSION_12_4: u32 = 120400;
pub const MAC_OS_VERSION_12_5: u32 = 120500;
pub const MAC_OS_VERSION_12_6: u32 = 120600;
pub const MAC_OS_VERSION_12_7: u32 = 120700;
pub const MAC_OS_VERSION_13_0: u32 = 130000;
pub const MAC_OS_VERSION_13_1: u32 = 130100;
pub const MAC_OS_VERSION_13_2: u32 = 130200;
pub const MAC_OS_VERSION_13_3: u32 = 130300;
pub const MAC_OS_VERSION_13_4: u32 = 130400;
pub const MAC_OS_VERSION_13_5: u32 = 130500;
pub const MAC_OS_VERSION_13_6: u32 = 130600;
pub const MAC_OS_VERSION_14_0: u32 = 140000;
pub const MAC_OS_VERSION_14_1: u32 = 140100;
pub const MAC_OS_VERSION_14_2: u32 = 140200;
pub const MAC_OS_VERSION_14_3: u32 = 140300;
pub const MAC_OS_VERSION_14_4: u32 = 140400;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 140400;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const RENAME_SECLUDE: u32 = 1;
pub const RENAME_SWAP: u32 = 2;
pub const RENAME_EXCL: u32 = 4;
pub const RENAME_RESERVED1: u32 = 8;
pub const RENAME_NOFOLLOW_ANY: u32 = 16;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_HOLE: u32 = 3;
pub const SEEK_DATA: u32 = 4;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SMOD: u32 = 8192;
pub const __SALC: u32 = 16384;
pub const __SIGN: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const P_tmpdir: &[u8; 10] = b"/var/tmp/\0";
pub const L_tmpnam: u32 = 1024;
pub const TMP_MAX: u32 = 308915776;
pub const L_ctermid: u32 = 1024;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const __WORDSIZE: u32 = 64;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const MQTT_INVALID_PROPERTY_ID: i32 = -2;
pub const MQTTCLIENT_PERSISTENCE_DEFAULT: u32 = 0;
pub const MQTTCLIENT_PERSISTENCE_NONE: u32 = 1;
pub const MQTTCLIENT_PERSISTENCE_USER: u32 = 2;
pub const MQTTCLIENT_PERSISTENCE_ERROR: i32 = -2;
pub const MQTTASYNC_SUCCESS: u32 = 0;
pub const MQTTASYNC_FAILURE: i32 = -1;
pub const MQTTASYNC_PERSISTENCE_ERROR: i32 = -2;
pub const MQTTASYNC_DISCONNECTED: i32 = -3;
pub const MQTTASYNC_MAX_MESSAGES_INFLIGHT: i32 = -4;
pub const MQTTASYNC_BAD_UTF8_STRING: i32 = -5;
pub const MQTTASYNC_NULL_PARAMETER: i32 = -6;
pub const MQTTASYNC_TOPICNAME_TRUNCATED: i32 = -7;
pub const MQTTASYNC_BAD_STRUCTURE: i32 = -8;
pub const MQTTASYNC_BAD_QOS: i32 = -9;
pub const MQTTASYNC_NO_MORE_MSGIDS: i32 = -10;
pub const MQTTASYNC_OPERATION_INCOMPLETE: i32 = -11;
pub const MQTTASYNC_MAX_BUFFERED_MESSAGES: i32 = -12;
pub const MQTTASYNC_SSL_NOT_SUPPORTED: i32 = -13;
pub const MQTTASYNC_BAD_PROTOCOL: i32 = -14;
pub const MQTTASYNC_BAD_MQTT_OPTION: i32 = -15;
pub const MQTTASYNC_WRONG_MQTT_VERSION: i32 = -16;
pub const MQTTASYNC_0_LEN_WILL_TOPIC: i32 = -17;
pub const MQTTASYNC_COMMAND_IGNORED: i32 = -18;
pub const MQTTASYNC_MAX_BUFFERED: i32 = -19;
pub const MQTTVERSION_DEFAULT: u32 = 0;
pub const MQTTVERSION_3_1: u32 = 3;
pub const MQTTVERSION_3_1_1: u32 = 4;
pub const MQTTVERSION_5: u32 = 5;
pub const MQTT_BAD_SUBSCRIBE: u32 = 128;
pub const MQTT_SSL_VERSION_DEFAULT: u32 = 0;
pub const MQTT_SSL_VERSION_TLS_1_0: u32 = 1;
pub const MQTT_SSL_VERSION_TLS_1_1: u32 = 2;
pub const MQTT_SSL_VERSION_TLS_1_2: u32 = 3;
pub const MQTTASYNC_TRUE: u32 = 1;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 128usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 8usize];
    ["Offset of field: __mbstate_t::__mbstate8"]
        [::std::mem::offset_of!(__mbstate_t, __mbstate8) - 0usize];
    ["Offset of field: __mbstate_t::_mbstateL"]
        [::std::mem::offset_of!(__mbstate_t, _mbstateL) - 0usize];
};
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_pthread_handler_rec"]
        [::std::mem::size_of::<__darwin_pthread_handler_rec>() - 24usize];
    ["Alignment of __darwin_pthread_handler_rec"]
        [::std::mem::align_of::<__darwin_pthread_handler_rec>() - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__routine"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __routine) - 0usize];
    ["Offset of field: __darwin_pthread_handler_rec::__arg"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __arg) - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__next"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __next) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_attr_t"][::std::mem::size_of::<_opaque_pthread_attr_t>() - 64usize];
    ["Alignment of _opaque_pthread_attr_t"]
        [::std::mem::align_of::<_opaque_pthread_attr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_attr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_attr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_cond_t"][::std::mem::size_of::<_opaque_pthread_cond_t>() - 48usize];
    ["Alignment of _opaque_pthread_cond_t"]
        [::std::mem::align_of::<_opaque_pthread_cond_t>() - 8usize];
    ["Offset of field: _opaque_pthread_cond_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_cond_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_condattr_t"]
        [::std::mem::size_of::<_opaque_pthread_condattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_condattr_t"]
        [::std::mem::align_of::<_opaque_pthread_condattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_condattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_condattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutex_t"][::std::mem::size_of::<_opaque_pthread_mutex_t>() - 64usize];
    ["Alignment of _opaque_pthread_mutex_t"]
        [::std::mem::align_of::<_opaque_pthread_mutex_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutex_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutex_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutexattr_t"]
        [::std::mem::size_of::<_opaque_pthread_mutexattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_mutexattr_t"]
        [::std::mem::align_of::<_opaque_pthread_mutexattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_once_t"][::std::mem::size_of::<_opaque_pthread_once_t>() - 16usize];
    ["Alignment of _opaque_pthread_once_t"]
        [::std::mem::align_of::<_opaque_pthread_once_t>() - 8usize];
    ["Offset of field: _opaque_pthread_once_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_once_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlock_t"]
        [::std::mem::size_of::<_opaque_pthread_rwlock_t>() - 200usize];
    ["Alignment of _opaque_pthread_rwlock_t"]
        [::std::mem::align_of::<_opaque_pthread_rwlock_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlockattr_t"]
        [::std::mem::size_of::<_opaque_pthread_rwlockattr_t>() - 24usize];
    ["Alignment of _opaque_pthread_rwlockattr_t"]
        [::std::mem::align_of::<_opaque_pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_t"][::std::mem::size_of::<_opaque_pthread_t>() - 8192usize];
    ["Alignment of _opaque_pthread_t"][::std::mem::align_of::<_opaque_pthread_t>() - 8usize];
    ["Offset of field: _opaque_pthread_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_t::__cleanup_stack"]
        [::std::mem::offset_of!(_opaque_pthread_t, __cleanup_stack) - 8usize];
    ["Offset of field: _opaque_pthread_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_t, __opaque) - 16usize];
};
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type va_list = __darwin_va_list;
unsafe extern "C" {
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn renamex_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn renameatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sbuf"][::std::mem::size_of::<__sbuf>() - 16usize];
    ["Alignment of __sbuf"][::std::mem::align_of::<__sbuf>() - 8usize];
    ["Offset of field: __sbuf::_base"][::std::mem::offset_of!(__sbuf, _base) - 0usize];
    ["Offset of field: __sbuf::_size"][::std::mem::offset_of!(__sbuf, _size) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sFILE"][::std::mem::size_of::<__sFILE>() - 152usize];
    ["Alignment of __sFILE"][::std::mem::align_of::<__sFILE>() - 8usize];
    ["Offset of field: __sFILE::_p"][::std::mem::offset_of!(__sFILE, _p) - 0usize];
    ["Offset of field: __sFILE::_r"][::std::mem::offset_of!(__sFILE, _r) - 8usize];
    ["Offset of field: __sFILE::_w"][::std::mem::offset_of!(__sFILE, _w) - 12usize];
    ["Offset of field: __sFILE::_flags"][::std::mem::offset_of!(__sFILE, _flags) - 16usize];
    ["Offset of field: __sFILE::_file"][::std::mem::offset_of!(__sFILE, _file) - 18usize];
    ["Offset of field: __sFILE::_bf"][::std::mem::offset_of!(__sFILE, _bf) - 24usize];
    ["Offset of field: __sFILE::_lbfsize"][::std::mem::offset_of!(__sFILE, _lbfsize) - 40usize];
    ["Offset of field: __sFILE::_cookie"][::std::mem::offset_of!(__sFILE, _cookie) - 48usize];
    ["Offset of field: __sFILE::_close"][::std::mem::offset_of!(__sFILE, _close) - 56usize];
    ["Offset of field: __sFILE::_read"][::std::mem::offset_of!(__sFILE, _read) - 64usize];
    ["Offset of field: __sFILE::_seek"][::std::mem::offset_of!(__sFILE, _seek) - 72usize];
    ["Offset of field: __sFILE::_write"][::std::mem::offset_of!(__sFILE, _write) - 80usize];
    ["Offset of field: __sFILE::_ub"][::std::mem::offset_of!(__sFILE, _ub) - 88usize];
    ["Offset of field: __sFILE::_extra"][::std::mem::offset_of!(__sFILE, _extra) - 104usize];
    ["Offset of field: __sFILE::_ur"][::std::mem::offset_of!(__sFILE, _ur) - 112usize];
    ["Offset of field: __sFILE::_ubuf"][::std::mem::offset_of!(__sFILE, _ubuf) - 116usize];
    ["Offset of field: __sFILE::_nbuf"][::std::mem::offset_of!(__sFILE, _nbuf) - 119usize];
    ["Offset of field: __sFILE::_lb"][::std::mem::offset_of!(__sFILE, _lb) - 120usize];
    ["Offset of field: __sFILE::_blksize"][::std::mem::offset_of!(__sFILE, _blksize) - 136usize];
    ["Offset of field: __sFILE::_offset"][::std::mem::offset_of!(__sFILE, _offset) - 144usize];
};
pub type FILE = __sFILE;
unsafe extern "C" {
    pub static mut __stdinp: *mut FILE;
}
unsafe extern "C" {
    pub static mut __stdoutp: *mut FILE;
}
unsafe extern "C" {
    pub static mut __stderrp: *mut FILE;
}
unsafe extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
unsafe extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
unsafe extern "C" {
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
unsafe extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __svfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
unsafe extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
unsafe extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type off_t = __darwin_off_t;
unsafe extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
unsafe extern "C" {
    pub fn snprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsnprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsscanf(
        __str: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getdelim(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> isize;
}
unsafe extern "C" {
    pub fn getline(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __stream: *mut FILE,
    ) -> isize;
}
unsafe extern "C" {
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: usize,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn open_memstream(
        __bufp: *mut *mut ::std::os::raw::c_char,
        __sizep: *mut usize,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub static sys_nerr: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
unsafe extern "C" {
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fgetln(arg1: *mut FILE, arg2: *mut usize) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fmtcheck(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setbuffer(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn funopen(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: fpos_t,
                arg3: ::std::os::raw::c_int,
            ) -> fpos_t,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn __sprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __snprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __vsprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __vsnprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_PAYLOAD_FORMAT_INDICATOR: MQTTPropertyCodes = 1;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_MESSAGE_EXPIRY_INTERVAL: MQTTPropertyCodes = 2;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_CONTENT_TYPE: MQTTPropertyCodes = 3;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_RESPONSE_TOPIC: MQTTPropertyCodes = 8;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_CORRELATION_DATA: MQTTPropertyCodes = 9;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_SUBSCRIPTION_IDENTIFIER: MQTTPropertyCodes = 11;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_SESSION_EXPIRY_INTERVAL: MQTTPropertyCodes = 17;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_ASSIGNED_CLIENT_IDENTIFIER: MQTTPropertyCodes = 18;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_ASSIGNED_CLIENT_IDENTIFER: MQTTPropertyCodes = 18;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_SERVER_KEEP_ALIVE: MQTTPropertyCodes = 19;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_AUTHENTICATION_METHOD: MQTTPropertyCodes = 21;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_AUTHENTICATION_DATA: MQTTPropertyCodes = 22;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_REQUEST_PROBLEM_INFORMATION: MQTTPropertyCodes = 23;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_WILL_DELAY_INTERVAL: MQTTPropertyCodes = 24;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_REQUEST_RESPONSE_INFORMATION: MQTTPropertyCodes = 25;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_RESPONSE_INFORMATION: MQTTPropertyCodes = 26;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_SERVER_REFERENCE: MQTTPropertyCodes = 28;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_REASON_STRING: MQTTPropertyCodes = 31;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_RECEIVE_MAXIMUM: MQTTPropertyCodes = 33;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_TOPIC_ALIAS_MAXIMUM: MQTTPropertyCodes = 34;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_TOPIC_ALIAS: MQTTPropertyCodes = 35;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_MAXIMUM_QOS: MQTTPropertyCodes = 36;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_RETAIN_AVAILABLE: MQTTPropertyCodes = 37;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_USER_PROPERTY: MQTTPropertyCodes = 38;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_MAXIMUM_PACKET_SIZE: MQTTPropertyCodes = 39;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_WILDCARD_SUBSCRIPTION_AVAILABLE: MQTTPropertyCodes =
    40;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_SUBSCRIPTION_IDENTIFIERS_AVAILABLE:
    MQTTPropertyCodes = 41;
pub const MQTTPropertyCodes_MQTTPROPERTY_CODE_SHARED_SUBSCRIPTION_AVAILABLE: MQTTPropertyCodes = 42;
pub type MQTTPropertyCodes = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn MQTTPropertyName(value: MQTTPropertyCodes) -> *const ::std::os::raw::c_char;
}
pub const MQTTPropertyTypes_MQTTPROPERTY_TYPE_BYTE: MQTTPropertyTypes = 0;
pub const MQTTPropertyTypes_MQTTPROPERTY_TYPE_TWO_BYTE_INTEGER: MQTTPropertyTypes = 1;
pub const MQTTPropertyTypes_MQTTPROPERTY_TYPE_FOUR_BYTE_INTEGER: MQTTPropertyTypes = 2;
pub const MQTTPropertyTypes_MQTTPROPERTY_TYPE_VARIABLE_BYTE_INTEGER: MQTTPropertyTypes = 3;
pub const MQTTPropertyTypes_MQTTPROPERTY_TYPE_BINARY_DATA: MQTTPropertyTypes = 4;
pub const MQTTPropertyTypes_MQTTPROPERTY_TYPE_UTF_8_ENCODED_STRING: MQTTPropertyTypes = 5;
pub const MQTTPropertyTypes_MQTTPROPERTY_TYPE_UTF_8_STRING_PAIR: MQTTPropertyTypes = 6;
pub type MQTTPropertyTypes = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn MQTTProperty_getType(value: MQTTPropertyCodes) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTLenString {
    pub len: ::std::os::raw::c_int,
    pub data: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTLenString"][::std::mem::size_of::<MQTTLenString>() - 16usize];
    ["Alignment of MQTTLenString"][::std::mem::align_of::<MQTTLenString>() - 8usize];
    ["Offset of field: MQTTLenString::len"][::std::mem::offset_of!(MQTTLenString, len) - 0usize];
    ["Offset of field: MQTTLenString::data"][::std::mem::offset_of!(MQTTLenString, data) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MQTTProperty {
    pub identifier: MQTTPropertyCodes,
    pub value: MQTTProperty__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MQTTProperty__bindgen_ty_1 {
    pub byte: ::std::os::raw::c_uchar,
    pub integer2: ::std::os::raw::c_ushort,
    pub integer4: ::std::os::raw::c_uint,
    pub __bindgen_anon_1: MQTTProperty__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTProperty__bindgen_ty_1__bindgen_ty_1 {
    pub data: MQTTLenString,
    pub value: MQTTLenString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTProperty__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<MQTTProperty__bindgen_ty_1__bindgen_ty_1>() - 32usize];
    ["Alignment of MQTTProperty__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<MQTTProperty__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: MQTTProperty__bindgen_ty_1__bindgen_ty_1::data"]
        [::std::mem::offset_of!(MQTTProperty__bindgen_ty_1__bindgen_ty_1, data) - 0usize];
    ["Offset of field: MQTTProperty__bindgen_ty_1__bindgen_ty_1::value"]
        [::std::mem::offset_of!(MQTTProperty__bindgen_ty_1__bindgen_ty_1, value) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTProperty__bindgen_ty_1"]
        [::std::mem::size_of::<MQTTProperty__bindgen_ty_1>() - 32usize];
    ["Alignment of MQTTProperty__bindgen_ty_1"]
        [::std::mem::align_of::<MQTTProperty__bindgen_ty_1>() - 8usize];
    ["Offset of field: MQTTProperty__bindgen_ty_1::byte"]
        [::std::mem::offset_of!(MQTTProperty__bindgen_ty_1, byte) - 0usize];
    ["Offset of field: MQTTProperty__bindgen_ty_1::integer2"]
        [::std::mem::offset_of!(MQTTProperty__bindgen_ty_1, integer2) - 0usize];
    ["Offset of field: MQTTProperty__bindgen_ty_1::integer4"]
        [::std::mem::offset_of!(MQTTProperty__bindgen_ty_1, integer4) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTProperty"][::std::mem::size_of::<MQTTProperty>() - 40usize];
    ["Alignment of MQTTProperty"][::std::mem::align_of::<MQTTProperty>() - 8usize];
    ["Offset of field: MQTTProperty::identifier"]
        [::std::mem::offset_of!(MQTTProperty, identifier) - 0usize];
    ["Offset of field: MQTTProperty::value"][::std::mem::offset_of!(MQTTProperty, value) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTProperties {
    pub count: ::std::os::raw::c_int,
    pub max_count: ::std::os::raw::c_int,
    pub length: ::std::os::raw::c_int,
    pub array: *mut MQTTProperty,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTProperties"][::std::mem::size_of::<MQTTProperties>() - 24usize];
    ["Alignment of MQTTProperties"][::std::mem::align_of::<MQTTProperties>() - 8usize];
    ["Offset of field: MQTTProperties::count"]
        [::std::mem::offset_of!(MQTTProperties, count) - 0usize];
    ["Offset of field: MQTTProperties::max_count"]
        [::std::mem::offset_of!(MQTTProperties, max_count) - 4usize];
    ["Offset of field: MQTTProperties::length"]
        [::std::mem::offset_of!(MQTTProperties, length) - 8usize];
    ["Offset of field: MQTTProperties::array"]
        [::std::mem::offset_of!(MQTTProperties, array) - 16usize];
};
unsafe extern "C" {
    pub fn MQTTProperties_len(props: *const MQTTProperties) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTProperties_add(
        props: *mut MQTTProperties,
        prop: *const MQTTProperty,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTProperties_write(
        pptr: *mut *mut ::std::os::raw::c_char,
        properties: *const MQTTProperties,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTProperties_read(
        properties: *mut MQTTProperties,
        pptr: *mut *mut ::std::os::raw::c_char,
        enddata: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTProperties_free(properties: *mut MQTTProperties);
}
unsafe extern "C" {
    pub fn MQTTProperties_copy(props: *const MQTTProperties) -> MQTTProperties;
}
unsafe extern "C" {
    pub fn MQTTProperties_hasProperty(
        props: *const MQTTProperties,
        propid: MQTTPropertyCodes,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTProperties_propertyCount(
        props: *const MQTTProperties,
        propid: MQTTPropertyCodes,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTProperties_getNumericValue(
        props: *const MQTTProperties,
        propid: MQTTPropertyCodes,
    ) -> i64;
}
unsafe extern "C" {
    pub fn MQTTProperties_getNumericValueAt(
        props: *const MQTTProperties,
        propid: MQTTPropertyCodes,
        index: ::std::os::raw::c_int,
    ) -> i64;
}
unsafe extern "C" {
    pub fn MQTTProperties_getProperty(
        props: *const MQTTProperties,
        propid: MQTTPropertyCodes,
    ) -> *mut MQTTProperty;
}
unsafe extern "C" {
    pub fn MQTTProperties_getPropertyAt(
        props: *const MQTTProperties,
        propid: MQTTPropertyCodes,
        index: ::std::os::raw::c_int,
    ) -> *mut MQTTProperty;
}
pub const MQTTReasonCodes_MQTTREASONCODE_SUCCESS: MQTTReasonCodes = 0;
pub const MQTTReasonCodes_MQTTREASONCODE_NORMAL_DISCONNECTION: MQTTReasonCodes = 0;
pub const MQTTReasonCodes_MQTTREASONCODE_GRANTED_QOS_0: MQTTReasonCodes = 0;
pub const MQTTReasonCodes_MQTTREASONCODE_GRANTED_QOS_1: MQTTReasonCodes = 1;
pub const MQTTReasonCodes_MQTTREASONCODE_GRANTED_QOS_2: MQTTReasonCodes = 2;
pub const MQTTReasonCodes_MQTTREASONCODE_DISCONNECT_WITH_WILL_MESSAGE: MQTTReasonCodes = 4;
pub const MQTTReasonCodes_MQTTREASONCODE_NO_MATCHING_SUBSCRIBERS: MQTTReasonCodes = 16;
pub const MQTTReasonCodes_MQTTREASONCODE_NO_SUBSCRIPTION_FOUND: MQTTReasonCodes = 17;
pub const MQTTReasonCodes_MQTTREASONCODE_CONTINUE_AUTHENTICATION: MQTTReasonCodes = 24;
pub const MQTTReasonCodes_MQTTREASONCODE_RE_AUTHENTICATE: MQTTReasonCodes = 25;
pub const MQTTReasonCodes_MQTTREASONCODE_UNSPECIFIED_ERROR: MQTTReasonCodes = 128;
pub const MQTTReasonCodes_MQTTREASONCODE_MALFORMED_PACKET: MQTTReasonCodes = 129;
pub const MQTTReasonCodes_MQTTREASONCODE_PROTOCOL_ERROR: MQTTReasonCodes = 130;
pub const MQTTReasonCodes_MQTTREASONCODE_IMPLEMENTATION_SPECIFIC_ERROR: MQTTReasonCodes = 131;
pub const MQTTReasonCodes_MQTTREASONCODE_UNSUPPORTED_PROTOCOL_VERSION: MQTTReasonCodes = 132;
pub const MQTTReasonCodes_MQTTREASONCODE_CLIENT_IDENTIFIER_NOT_VALID: MQTTReasonCodes = 133;
pub const MQTTReasonCodes_MQTTREASONCODE_BAD_USER_NAME_OR_PASSWORD: MQTTReasonCodes = 134;
pub const MQTTReasonCodes_MQTTREASONCODE_NOT_AUTHORIZED: MQTTReasonCodes = 135;
pub const MQTTReasonCodes_MQTTREASONCODE_SERVER_UNAVAILABLE: MQTTReasonCodes = 136;
pub const MQTTReasonCodes_MQTTREASONCODE_SERVER_BUSY: MQTTReasonCodes = 137;
pub const MQTTReasonCodes_MQTTREASONCODE_BANNED: MQTTReasonCodes = 138;
pub const MQTTReasonCodes_MQTTREASONCODE_SERVER_SHUTTING_DOWN: MQTTReasonCodes = 139;
pub const MQTTReasonCodes_MQTTREASONCODE_BAD_AUTHENTICATION_METHOD: MQTTReasonCodes = 140;
pub const MQTTReasonCodes_MQTTREASONCODE_KEEP_ALIVE_TIMEOUT: MQTTReasonCodes = 141;
pub const MQTTReasonCodes_MQTTREASONCODE_SESSION_TAKEN_OVER: MQTTReasonCodes = 142;
pub const MQTTReasonCodes_MQTTREASONCODE_TOPIC_FILTER_INVALID: MQTTReasonCodes = 143;
pub const MQTTReasonCodes_MQTTREASONCODE_TOPIC_NAME_INVALID: MQTTReasonCodes = 144;
pub const MQTTReasonCodes_MQTTREASONCODE_PACKET_IDENTIFIER_IN_USE: MQTTReasonCodes = 145;
pub const MQTTReasonCodes_MQTTREASONCODE_PACKET_IDENTIFIER_NOT_FOUND: MQTTReasonCodes = 146;
pub const MQTTReasonCodes_MQTTREASONCODE_RECEIVE_MAXIMUM_EXCEEDED: MQTTReasonCodes = 147;
pub const MQTTReasonCodes_MQTTREASONCODE_TOPIC_ALIAS_INVALID: MQTTReasonCodes = 148;
pub const MQTTReasonCodes_MQTTREASONCODE_PACKET_TOO_LARGE: MQTTReasonCodes = 149;
pub const MQTTReasonCodes_MQTTREASONCODE_MESSAGE_RATE_TOO_HIGH: MQTTReasonCodes = 150;
pub const MQTTReasonCodes_MQTTREASONCODE_QUOTA_EXCEEDED: MQTTReasonCodes = 151;
pub const MQTTReasonCodes_MQTTREASONCODE_ADMINISTRATIVE_ACTION: MQTTReasonCodes = 152;
pub const MQTTReasonCodes_MQTTREASONCODE_PAYLOAD_FORMAT_INVALID: MQTTReasonCodes = 153;
pub const MQTTReasonCodes_MQTTREASONCODE_RETAIN_NOT_SUPPORTED: MQTTReasonCodes = 154;
pub const MQTTReasonCodes_MQTTREASONCODE_QOS_NOT_SUPPORTED: MQTTReasonCodes = 155;
pub const MQTTReasonCodes_MQTTREASONCODE_USE_ANOTHER_SERVER: MQTTReasonCodes = 156;
pub const MQTTReasonCodes_MQTTREASONCODE_SERVER_MOVED: MQTTReasonCodes = 157;
pub const MQTTReasonCodes_MQTTREASONCODE_SHARED_SUBSCRIPTIONS_NOT_SUPPORTED: MQTTReasonCodes = 158;
pub const MQTTReasonCodes_MQTTREASONCODE_CONNECTION_RATE_EXCEEDED: MQTTReasonCodes = 159;
pub const MQTTReasonCodes_MQTTREASONCODE_MAXIMUM_CONNECT_TIME: MQTTReasonCodes = 160;
pub const MQTTReasonCodes_MQTTREASONCODE_SUBSCRIPTION_IDENTIFIERS_NOT_SUPPORTED: MQTTReasonCodes =
    161;
pub const MQTTReasonCodes_MQTTREASONCODE_WILDCARD_SUBSCRIPTIONS_NOT_SUPPORTED: MQTTReasonCodes =
    162;
pub type MQTTReasonCodes = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn MQTTReasonCode_toString(value: MQTTReasonCodes) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTSubscribe_options {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub noLocal: ::std::os::raw::c_uchar,
    pub retainAsPublished: ::std::os::raw::c_uchar,
    pub retainHandling: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTSubscribe_options"][::std::mem::size_of::<MQTTSubscribe_options>() - 12usize];
    ["Alignment of MQTTSubscribe_options"]
        [::std::mem::align_of::<MQTTSubscribe_options>() - 4usize];
    ["Offset of field: MQTTSubscribe_options::struct_id"]
        [::std::mem::offset_of!(MQTTSubscribe_options, struct_id) - 0usize];
    ["Offset of field: MQTTSubscribe_options::struct_version"]
        [::std::mem::offset_of!(MQTTSubscribe_options, struct_version) - 4usize];
    ["Offset of field: MQTTSubscribe_options::noLocal"]
        [::std::mem::offset_of!(MQTTSubscribe_options, noLocal) - 8usize];
    ["Offset of field: MQTTSubscribe_options::retainAsPublished"]
        [::std::mem::offset_of!(MQTTSubscribe_options, retainAsPublished) - 9usize];
    ["Offset of field: MQTTSubscribe_options::retainHandling"]
        [::std::mem::offset_of!(MQTTSubscribe_options, retainHandling) - 10usize];
};
pub type Persistence_open = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut *mut ::std::os::raw::c_void,
        clientID: *const ::std::os::raw::c_char,
        serverURI: *const ::std::os::raw::c_char,
        context: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type Persistence_close = ::std::option::Option<
    unsafe extern "C" fn(handle: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
pub type Persistence_put = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut ::std::os::raw::c_void,
        key: *mut ::std::os::raw::c_char,
        bufcount: ::std::os::raw::c_int,
        buffers: *mut *mut ::std::os::raw::c_char,
        buflens: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type Persistence_get = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut ::std::os::raw::c_void,
        key: *mut ::std::os::raw::c_char,
        buffer: *mut *mut ::std::os::raw::c_char,
        buflen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type Persistence_remove = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut ::std::os::raw::c_void,
        key: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type Persistence_keys = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut ::std::os::raw::c_void,
        keys: *mut *mut *mut ::std::os::raw::c_char,
        nkeys: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type Persistence_clear = ::std::option::Option<
    unsafe extern "C" fn(handle: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
pub type Persistence_containskey = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut ::std::os::raw::c_void,
        key: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTClient_persistence {
    pub context: *mut ::std::os::raw::c_void,
    pub popen: Persistence_open,
    pub pclose: Persistence_close,
    pub pput: Persistence_put,
    pub pget: Persistence_get,
    pub premove: Persistence_remove,
    pub pkeys: Persistence_keys,
    pub pclear: Persistence_clear,
    pub pcontainskey: Persistence_containskey,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTClient_persistence"][::std::mem::size_of::<MQTTClient_persistence>() - 72usize];
    ["Alignment of MQTTClient_persistence"]
        [::std::mem::align_of::<MQTTClient_persistence>() - 8usize];
    ["Offset of field: MQTTClient_persistence::context"]
        [::std::mem::offset_of!(MQTTClient_persistence, context) - 0usize];
    ["Offset of field: MQTTClient_persistence::popen"]
        [::std::mem::offset_of!(MQTTClient_persistence, popen) - 8usize];
    ["Offset of field: MQTTClient_persistence::pclose"]
        [::std::mem::offset_of!(MQTTClient_persistence, pclose) - 16usize];
    ["Offset of field: MQTTClient_persistence::pput"]
        [::std::mem::offset_of!(MQTTClient_persistence, pput) - 24usize];
    ["Offset of field: MQTTClient_persistence::pget"]
        [::std::mem::offset_of!(MQTTClient_persistence, pget) - 32usize];
    ["Offset of field: MQTTClient_persistence::premove"]
        [::std::mem::offset_of!(MQTTClient_persistence, premove) - 40usize];
    ["Offset of field: MQTTClient_persistence::pkeys"]
        [::std::mem::offset_of!(MQTTClient_persistence, pkeys) - 48usize];
    ["Offset of field: MQTTClient_persistence::pclear"]
        [::std::mem::offset_of!(MQTTClient_persistence, pclear) - 56usize];
    ["Offset of field: MQTTClient_persistence::pcontainskey"]
        [::std::mem::offset_of!(MQTTClient_persistence, pcontainskey) - 64usize];
};
pub type MQTTPersistence_beforeWrite = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        bufcount: ::std::os::raw::c_int,
        buffers: *mut *mut ::std::os::raw::c_char,
        buflens: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type MQTTPersistence_afterRead = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        buffer: *mut *mut ::std::os::raw::c_char,
        buflen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_init_options {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub do_openssl_init: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_init_options"][::std::mem::size_of::<MQTTAsync_init_options>() - 12usize];
    ["Alignment of MQTTAsync_init_options"]
        [::std::mem::align_of::<MQTTAsync_init_options>() - 4usize];
    ["Offset of field: MQTTAsync_init_options::struct_id"]
        [::std::mem::offset_of!(MQTTAsync_init_options, struct_id) - 0usize];
    ["Offset of field: MQTTAsync_init_options::struct_version"]
        [::std::mem::offset_of!(MQTTAsync_init_options, struct_version) - 4usize];
    ["Offset of field: MQTTAsync_init_options::do_openssl_init"]
        [::std::mem::offset_of!(MQTTAsync_init_options, do_openssl_init) - 8usize];
};
unsafe extern "C" {
    pub fn MQTTAsync_global_init(inits: *mut MQTTAsync_init_options);
}
pub type MQTTAsync = *mut ::std::os::raw::c_void;
pub type MQTTAsync_token = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_message {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub payloadlen: ::std::os::raw::c_int,
    pub payload: *mut ::std::os::raw::c_void,
    pub qos: ::std::os::raw::c_int,
    pub retained: ::std::os::raw::c_int,
    pub dup: ::std::os::raw::c_int,
    pub msgid: ::std::os::raw::c_int,
    pub properties: MQTTProperties,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_message"][::std::mem::size_of::<MQTTAsync_message>() - 64usize];
    ["Alignment of MQTTAsync_message"][::std::mem::align_of::<MQTTAsync_message>() - 8usize];
    ["Offset of field: MQTTAsync_message::struct_id"]
        [::std::mem::offset_of!(MQTTAsync_message, struct_id) - 0usize];
    ["Offset of field: MQTTAsync_message::struct_version"]
        [::std::mem::offset_of!(MQTTAsync_message, struct_version) - 4usize];
    ["Offset of field: MQTTAsync_message::payloadlen"]
        [::std::mem::offset_of!(MQTTAsync_message, payloadlen) - 8usize];
    ["Offset of field: MQTTAsync_message::payload"]
        [::std::mem::offset_of!(MQTTAsync_message, payload) - 16usize];
    ["Offset of field: MQTTAsync_message::qos"]
        [::std::mem::offset_of!(MQTTAsync_message, qos) - 24usize];
    ["Offset of field: MQTTAsync_message::retained"]
        [::std::mem::offset_of!(MQTTAsync_message, retained) - 28usize];
    ["Offset of field: MQTTAsync_message::dup"]
        [::std::mem::offset_of!(MQTTAsync_message, dup) - 32usize];
    ["Offset of field: MQTTAsync_message::msgid"]
        [::std::mem::offset_of!(MQTTAsync_message, msgid) - 36usize];
    ["Offset of field: MQTTAsync_message::properties"]
        [::std::mem::offset_of!(MQTTAsync_message, properties) - 40usize];
};
pub type MQTTAsync_messageArrived = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        topicName: *mut ::std::os::raw::c_char,
        topicLen: ::std::os::raw::c_int,
        message: *mut MQTTAsync_message,
    ) -> ::std::os::raw::c_int,
>;
pub type MQTTAsync_deliveryComplete = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ::std::os::raw::c_void, token: MQTTAsync_token),
>;
pub type MQTTAsync_connectionLost = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ::std::os::raw::c_void, cause: *mut ::std::os::raw::c_char),
>;
pub type MQTTAsync_connected = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ::std::os::raw::c_void, cause: *mut ::std::os::raw::c_char),
>;
pub type MQTTAsync_disconnected = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        properties: *mut MQTTProperties,
        reasonCode: MQTTReasonCodes,
    ),
>;
unsafe extern "C" {
    pub fn MQTTAsync_setDisconnected(
        handle: MQTTAsync,
        context: *mut ::std::os::raw::c_void,
        co: MQTTAsync_disconnected,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_connectData {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub username: *const ::std::os::raw::c_char,
    pub binarypwd: MQTTAsync_connectData__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_connectData__bindgen_ty_1 {
    pub len: ::std::os::raw::c_int,
    pub data: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_connectData__bindgen_ty_1"]
        [::std::mem::size_of::<MQTTAsync_connectData__bindgen_ty_1>() - 16usize];
    ["Alignment of MQTTAsync_connectData__bindgen_ty_1"]
        [::std::mem::align_of::<MQTTAsync_connectData__bindgen_ty_1>() - 8usize];
    ["Offset of field: MQTTAsync_connectData__bindgen_ty_1::len"]
        [::std::mem::offset_of!(MQTTAsync_connectData__bindgen_ty_1, len) - 0usize];
    ["Offset of field: MQTTAsync_connectData__bindgen_ty_1::data"]
        [::std::mem::offset_of!(MQTTAsync_connectData__bindgen_ty_1, data) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_connectData"][::std::mem::size_of::<MQTTAsync_connectData>() - 32usize];
    ["Alignment of MQTTAsync_connectData"]
        [::std::mem::align_of::<MQTTAsync_connectData>() - 8usize];
    ["Offset of field: MQTTAsync_connectData::struct_id"]
        [::std::mem::offset_of!(MQTTAsync_connectData, struct_id) - 0usize];
    ["Offset of field: MQTTAsync_connectData::struct_version"]
        [::std::mem::offset_of!(MQTTAsync_connectData, struct_version) - 4usize];
    ["Offset of field: MQTTAsync_connectData::username"]
        [::std::mem::offset_of!(MQTTAsync_connectData, username) - 8usize];
    ["Offset of field: MQTTAsync_connectData::binarypwd"]
        [::std::mem::offset_of!(MQTTAsync_connectData, binarypwd) - 16usize];
};
pub type MQTTAsync_updateConnectOptions = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        data: *mut MQTTAsync_connectData,
    ) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn MQTTAsync_setUpdateConnectOptions(
        handle: MQTTAsync,
        context: *mut ::std::os::raw::c_void,
        co: MQTTAsync_updateConnectOptions,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_setBeforePersistenceWrite(
        handle: MQTTAsync,
        context: *mut ::std::os::raw::c_void,
        co: MQTTPersistence_beforeWrite,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_setAfterPersistenceRead(
        handle: MQTTAsync,
        context: *mut ::std::os::raw::c_void,
        co: MQTTPersistence_afterRead,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_failureData {
    pub token: MQTTAsync_token,
    pub code: ::std::os::raw::c_int,
    pub message: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_failureData"][::std::mem::size_of::<MQTTAsync_failureData>() - 16usize];
    ["Alignment of MQTTAsync_failureData"]
        [::std::mem::align_of::<MQTTAsync_failureData>() - 8usize];
    ["Offset of field: MQTTAsync_failureData::token"]
        [::std::mem::offset_of!(MQTTAsync_failureData, token) - 0usize];
    ["Offset of field: MQTTAsync_failureData::code"]
        [::std::mem::offset_of!(MQTTAsync_failureData, code) - 4usize];
    ["Offset of field: MQTTAsync_failureData::message"]
        [::std::mem::offset_of!(MQTTAsync_failureData, message) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_failureData5 {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub token: MQTTAsync_token,
    pub reasonCode: MQTTReasonCodes,
    pub properties: MQTTProperties,
    pub code: ::std::os::raw::c_int,
    pub message: *const ::std::os::raw::c_char,
    pub packet_type: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_failureData5"][::std::mem::size_of::<MQTTAsync_failureData5>() - 64usize];
    ["Alignment of MQTTAsync_failureData5"]
        [::std::mem::align_of::<MQTTAsync_failureData5>() - 8usize];
    ["Offset of field: MQTTAsync_failureData5::struct_id"]
        [::std::mem::offset_of!(MQTTAsync_failureData5, struct_id) - 0usize];
    ["Offset of field: MQTTAsync_failureData5::struct_version"]
        [::std::mem::offset_of!(MQTTAsync_failureData5, struct_version) - 4usize];
    ["Offset of field: MQTTAsync_failureData5::token"]
        [::std::mem::offset_of!(MQTTAsync_failureData5, token) - 8usize];
    ["Offset of field: MQTTAsync_failureData5::reasonCode"]
        [::std::mem::offset_of!(MQTTAsync_failureData5, reasonCode) - 12usize];
    ["Offset of field: MQTTAsync_failureData5::properties"]
        [::std::mem::offset_of!(MQTTAsync_failureData5, properties) - 16usize];
    ["Offset of field: MQTTAsync_failureData5::code"]
        [::std::mem::offset_of!(MQTTAsync_failureData5, code) - 40usize];
    ["Offset of field: MQTTAsync_failureData5::message"]
        [::std::mem::offset_of!(MQTTAsync_failureData5, message) - 48usize];
    ["Offset of field: MQTTAsync_failureData5::packet_type"]
        [::std::mem::offset_of!(MQTTAsync_failureData5, packet_type) - 56usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MQTTAsync_successData {
    pub token: MQTTAsync_token,
    pub alt: MQTTAsync_successData__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MQTTAsync_successData__bindgen_ty_1 {
    pub qos: ::std::os::raw::c_int,
    pub qosList: *mut ::std::os::raw::c_int,
    pub pub_: MQTTAsync_successData__bindgen_ty_1__bindgen_ty_1,
    pub connect: MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_successData__bindgen_ty_1__bindgen_ty_1 {
    pub message: MQTTAsync_message,
    pub destinationName: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_successData__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<MQTTAsync_successData__bindgen_ty_1__bindgen_ty_1>() - 72usize];
    ["Alignment of MQTTAsync_successData__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<MQTTAsync_successData__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: MQTTAsync_successData__bindgen_ty_1__bindgen_ty_1::message"][::std::mem::offset_of!(
        MQTTAsync_successData__bindgen_ty_1__bindgen_ty_1,
        message
    ) - 0usize];
    ["Offset of field: MQTTAsync_successData__bindgen_ty_1__bindgen_ty_1::destinationName"][::std::mem::offset_of!(
        MQTTAsync_successData__bindgen_ty_1__bindgen_ty_1,
        destinationName
    )
        - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2 {
    pub serverURI: *mut ::std::os::raw::c_char,
    pub MQTTVersion: ::std::os::raw::c_int,
    pub sessionPresent: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2>() - 16usize];
    ["Alignment of MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2::serverURI"][::std::mem::offset_of!(
        MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2,
        serverURI
    ) - 0usize];
    ["Offset of field: MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2::MQTTVersion"][::std::mem::offset_of!(
        MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2,
        MQTTVersion
    ) - 8usize];
    ["Offset of field: MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2::sessionPresent"][::std::mem::offset_of!(
        MQTTAsync_successData__bindgen_ty_1__bindgen_ty_2,
        sessionPresent
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_successData__bindgen_ty_1"]
        [::std::mem::size_of::<MQTTAsync_successData__bindgen_ty_1>() - 72usize];
    ["Alignment of MQTTAsync_successData__bindgen_ty_1"]
        [::std::mem::align_of::<MQTTAsync_successData__bindgen_ty_1>() - 8usize];
    ["Offset of field: MQTTAsync_successData__bindgen_ty_1::qos"]
        [::std::mem::offset_of!(MQTTAsync_successData__bindgen_ty_1, qos) - 0usize];
    ["Offset of field: MQTTAsync_successData__bindgen_ty_1::qosList"]
        [::std::mem::offset_of!(MQTTAsync_successData__bindgen_ty_1, qosList) - 0usize];
    ["Offset of field: MQTTAsync_successData__bindgen_ty_1::pub_"]
        [::std::mem::offset_of!(MQTTAsync_successData__bindgen_ty_1, pub_) - 0usize];
    ["Offset of field: MQTTAsync_successData__bindgen_ty_1::connect"]
        [::std::mem::offset_of!(MQTTAsync_successData__bindgen_ty_1, connect) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_successData"][::std::mem::size_of::<MQTTAsync_successData>() - 80usize];
    ["Alignment of MQTTAsync_successData"]
        [::std::mem::align_of::<MQTTAsync_successData>() - 8usize];
    ["Offset of field: MQTTAsync_successData::token"]
        [::std::mem::offset_of!(MQTTAsync_successData, token) - 0usize];
    ["Offset of field: MQTTAsync_successData::alt"]
        [::std::mem::offset_of!(MQTTAsync_successData, alt) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MQTTAsync_successData5 {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub token: MQTTAsync_token,
    pub reasonCode: MQTTReasonCodes,
    pub properties: MQTTProperties,
    pub alt: MQTTAsync_successData5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MQTTAsync_successData5__bindgen_ty_1 {
    pub sub: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_1,
    pub pub_: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_2,
    pub connect: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3,
    pub unsub: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_1 {
    pub reasonCodeCount: ::std::os::raw::c_int,
    pub reasonCodes: *mut MQTTReasonCodes,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_1::reasonCodeCount"][::std::mem::offset_of!(
        MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_1,
        reasonCodeCount
    )
        - 0usize];
    ["Offset of field: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_1::reasonCodes"][::std::mem::offset_of!(
        MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_1,
        reasonCodes
    )
        - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_2 {
    pub message: MQTTAsync_message,
    pub destinationName: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_2>() - 72usize];
    ["Alignment of MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_2::message"][::std::mem::offset_of!(
        MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_2,
        message
    ) - 0usize];
    ["Offset of field: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_2::destinationName"][::std::mem::offset_of!(
        MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_2,
        destinationName
    )
        - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3 {
    pub serverURI: *mut ::std::os::raw::c_char,
    pub MQTTVersion: ::std::os::raw::c_int,
    pub sessionPresent: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3>() - 16usize];
    ["Alignment of MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3::serverURI"][::std::mem::offset_of!(
        MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3,
        serverURI
    ) - 0usize];
    ["Offset of field: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3::MQTTVersion"][::std::mem::offset_of!(
        MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3,
        MQTTVersion
    )
        - 8usize];
    ["Offset of field: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3::sessionPresent"][::std::mem::offset_of!(
        MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_3,
        sessionPresent
    )
        - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_4 {
    pub reasonCodeCount: ::std::os::raw::c_int,
    pub reasonCodes: *mut MQTTReasonCodes,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_4>() - 16usize];
    ["Alignment of MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Offset of field: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_4::reasonCodeCount"][::std::mem::offset_of!(
        MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_4,
        reasonCodeCount
    )
        - 0usize];
    ["Offset of field: MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_4::reasonCodes"][::std::mem::offset_of!(
        MQTTAsync_successData5__bindgen_ty_1__bindgen_ty_4,
        reasonCodes
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_successData5__bindgen_ty_1"]
        [::std::mem::size_of::<MQTTAsync_successData5__bindgen_ty_1>() - 72usize];
    ["Alignment of MQTTAsync_successData5__bindgen_ty_1"]
        [::std::mem::align_of::<MQTTAsync_successData5__bindgen_ty_1>() - 8usize];
    ["Offset of field: MQTTAsync_successData5__bindgen_ty_1::sub"]
        [::std::mem::offset_of!(MQTTAsync_successData5__bindgen_ty_1, sub) - 0usize];
    ["Offset of field: MQTTAsync_successData5__bindgen_ty_1::pub_"]
        [::std::mem::offset_of!(MQTTAsync_successData5__bindgen_ty_1, pub_) - 0usize];
    ["Offset of field: MQTTAsync_successData5__bindgen_ty_1::connect"]
        [::std::mem::offset_of!(MQTTAsync_successData5__bindgen_ty_1, connect) - 0usize];
    ["Offset of field: MQTTAsync_successData5__bindgen_ty_1::unsub"]
        [::std::mem::offset_of!(MQTTAsync_successData5__bindgen_ty_1, unsub) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_successData5"][::std::mem::size_of::<MQTTAsync_successData5>() - 112usize];
    ["Alignment of MQTTAsync_successData5"]
        [::std::mem::align_of::<MQTTAsync_successData5>() - 8usize];
    ["Offset of field: MQTTAsync_successData5::struct_id"]
        [::std::mem::offset_of!(MQTTAsync_successData5, struct_id) - 0usize];
    ["Offset of field: MQTTAsync_successData5::struct_version"]
        [::std::mem::offset_of!(MQTTAsync_successData5, struct_version) - 4usize];
    ["Offset of field: MQTTAsync_successData5::token"]
        [::std::mem::offset_of!(MQTTAsync_successData5, token) - 8usize];
    ["Offset of field: MQTTAsync_successData5::reasonCode"]
        [::std::mem::offset_of!(MQTTAsync_successData5, reasonCode) - 12usize];
    ["Offset of field: MQTTAsync_successData5::properties"]
        [::std::mem::offset_of!(MQTTAsync_successData5, properties) - 16usize];
    ["Offset of field: MQTTAsync_successData5::alt"]
        [::std::mem::offset_of!(MQTTAsync_successData5, alt) - 40usize];
};
pub type MQTTAsync_onSuccess = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        response: *mut MQTTAsync_successData,
    ),
>;
pub type MQTTAsync_onSuccess5 = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        response: *mut MQTTAsync_successData5,
    ),
>;
pub type MQTTAsync_onFailure = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        response: *mut MQTTAsync_failureData,
    ),
>;
pub type MQTTAsync_onFailure5 = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        response: *mut MQTTAsync_failureData5,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_responseOptions {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub onSuccess: MQTTAsync_onSuccess,
    pub onFailure: MQTTAsync_onFailure,
    pub context: *mut ::std::os::raw::c_void,
    pub token: MQTTAsync_token,
    pub onSuccess5: MQTTAsync_onSuccess5,
    pub onFailure5: MQTTAsync_onFailure5,
    pub properties: MQTTProperties,
    pub subscribeOptions: MQTTSubscribe_options,
    pub subscribeOptionsCount: ::std::os::raw::c_int,
    pub subscribeOptionsList: *mut MQTTSubscribe_options,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_responseOptions"]
        [::std::mem::size_of::<MQTTAsync_responseOptions>() - 104usize];
    ["Alignment of MQTTAsync_responseOptions"]
        [::std::mem::align_of::<MQTTAsync_responseOptions>() - 8usize];
    ["Offset of field: MQTTAsync_responseOptions::struct_id"]
        [::std::mem::offset_of!(MQTTAsync_responseOptions, struct_id) - 0usize];
    ["Offset of field: MQTTAsync_responseOptions::struct_version"]
        [::std::mem::offset_of!(MQTTAsync_responseOptions, struct_version) - 4usize];
    ["Offset of field: MQTTAsync_responseOptions::onSuccess"]
        [::std::mem::offset_of!(MQTTAsync_responseOptions, onSuccess) - 8usize];
    ["Offset of field: MQTTAsync_responseOptions::onFailure"]
        [::std::mem::offset_of!(MQTTAsync_responseOptions, onFailure) - 16usize];
    ["Offset of field: MQTTAsync_responseOptions::context"]
        [::std::mem::offset_of!(MQTTAsync_responseOptions, context) - 24usize];
    ["Offset of field: MQTTAsync_responseOptions::token"]
        [::std::mem::offset_of!(MQTTAsync_responseOptions, token) - 32usize];
    ["Offset of field: MQTTAsync_responseOptions::onSuccess5"]
        [::std::mem::offset_of!(MQTTAsync_responseOptions, onSuccess5) - 40usize];
    ["Offset of field: MQTTAsync_responseOptions::onFailure5"]
        [::std::mem::offset_of!(MQTTAsync_responseOptions, onFailure5) - 48usize];
    ["Offset of field: MQTTAsync_responseOptions::properties"]
        [::std::mem::offset_of!(MQTTAsync_responseOptions, properties) - 56usize];
    ["Offset of field: MQTTAsync_responseOptions::subscribeOptions"]
        [::std::mem::offset_of!(MQTTAsync_responseOptions, subscribeOptions) - 80usize];
    ["Offset of field: MQTTAsync_responseOptions::subscribeOptionsCount"]
        [::std::mem::offset_of!(MQTTAsync_responseOptions, subscribeOptionsCount) - 92usize];
    ["Offset of field: MQTTAsync_responseOptions::subscribeOptionsList"]
        [::std::mem::offset_of!(MQTTAsync_responseOptions, subscribeOptionsList) - 96usize];
};
pub type MQTTAsync_callOptions = MQTTAsync_responseOptions;
unsafe extern "C" {
    pub fn MQTTAsync_setCallbacks(
        handle: MQTTAsync,
        context: *mut ::std::os::raw::c_void,
        cl: MQTTAsync_connectionLost,
        ma: MQTTAsync_messageArrived,
        dc: MQTTAsync_deliveryComplete,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_setConnectionLostCallback(
        handle: MQTTAsync,
        context: *mut ::std::os::raw::c_void,
        cl: MQTTAsync_connectionLost,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_setMessageArrivedCallback(
        handle: MQTTAsync,
        context: *mut ::std::os::raw::c_void,
        ma: MQTTAsync_messageArrived,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_setDeliveryCompleteCallback(
        handle: MQTTAsync,
        context: *mut ::std::os::raw::c_void,
        dc: MQTTAsync_deliveryComplete,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_setConnected(
        handle: MQTTAsync,
        context: *mut ::std::os::raw::c_void,
        co: MQTTAsync_connected,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_reconnect(handle: MQTTAsync) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_create(
        handle: *mut MQTTAsync,
        serverURI: *const ::std::os::raw::c_char,
        clientId: *const ::std::os::raw::c_char,
        persistence_type: ::std::os::raw::c_int,
        persistence_context: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_createOptions {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub sendWhileDisconnected: ::std::os::raw::c_int,
    pub maxBufferedMessages: ::std::os::raw::c_int,
    pub MQTTVersion: ::std::os::raw::c_int,
    pub allowDisconnectedSendAtAnyTime: ::std::os::raw::c_int,
    pub deleteOldestMessages: ::std::os::raw::c_int,
    pub restoreMessages: ::std::os::raw::c_int,
    pub persistQoS0: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_createOptions"][::std::mem::size_of::<MQTTAsync_createOptions>() - 36usize];
    ["Alignment of MQTTAsync_createOptions"]
        [::std::mem::align_of::<MQTTAsync_createOptions>() - 4usize];
    ["Offset of field: MQTTAsync_createOptions::struct_id"]
        [::std::mem::offset_of!(MQTTAsync_createOptions, struct_id) - 0usize];
    ["Offset of field: MQTTAsync_createOptions::struct_version"]
        [::std::mem::offset_of!(MQTTAsync_createOptions, struct_version) - 4usize];
    ["Offset of field: MQTTAsync_createOptions::sendWhileDisconnected"]
        [::std::mem::offset_of!(MQTTAsync_createOptions, sendWhileDisconnected) - 8usize];
    ["Offset of field: MQTTAsync_createOptions::maxBufferedMessages"]
        [::std::mem::offset_of!(MQTTAsync_createOptions, maxBufferedMessages) - 12usize];
    ["Offset of field: MQTTAsync_createOptions::MQTTVersion"]
        [::std::mem::offset_of!(MQTTAsync_createOptions, MQTTVersion) - 16usize];
    ["Offset of field: MQTTAsync_createOptions::allowDisconnectedSendAtAnyTime"]
        [::std::mem::offset_of!(MQTTAsync_createOptions, allowDisconnectedSendAtAnyTime) - 20usize];
    ["Offset of field: MQTTAsync_createOptions::deleteOldestMessages"]
        [::std::mem::offset_of!(MQTTAsync_createOptions, deleteOldestMessages) - 24usize];
    ["Offset of field: MQTTAsync_createOptions::restoreMessages"]
        [::std::mem::offset_of!(MQTTAsync_createOptions, restoreMessages) - 28usize];
    ["Offset of field: MQTTAsync_createOptions::persistQoS0"]
        [::std::mem::offset_of!(MQTTAsync_createOptions, persistQoS0) - 32usize];
};
unsafe extern "C" {
    pub fn MQTTAsync_createWithOptions(
        handle: *mut MQTTAsync,
        serverURI: *const ::std::os::raw::c_char,
        clientId: *const ::std::os::raw::c_char,
        persistence_type: ::std::os::raw::c_int,
        persistence_context: *mut ::std::os::raw::c_void,
        options: *mut MQTTAsync_createOptions,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_willOptions {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub topicName: *const ::std::os::raw::c_char,
    pub message: *const ::std::os::raw::c_char,
    pub retained: ::std::os::raw::c_int,
    pub qos: ::std::os::raw::c_int,
    pub payload: MQTTAsync_willOptions__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_willOptions__bindgen_ty_1 {
    pub len: ::std::os::raw::c_int,
    pub data: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_willOptions__bindgen_ty_1"]
        [::std::mem::size_of::<MQTTAsync_willOptions__bindgen_ty_1>() - 16usize];
    ["Alignment of MQTTAsync_willOptions__bindgen_ty_1"]
        [::std::mem::align_of::<MQTTAsync_willOptions__bindgen_ty_1>() - 8usize];
    ["Offset of field: MQTTAsync_willOptions__bindgen_ty_1::len"]
        [::std::mem::offset_of!(MQTTAsync_willOptions__bindgen_ty_1, len) - 0usize];
    ["Offset of field: MQTTAsync_willOptions__bindgen_ty_1::data"]
        [::std::mem::offset_of!(MQTTAsync_willOptions__bindgen_ty_1, data) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_willOptions"][::std::mem::size_of::<MQTTAsync_willOptions>() - 48usize];
    ["Alignment of MQTTAsync_willOptions"]
        [::std::mem::align_of::<MQTTAsync_willOptions>() - 8usize];
    ["Offset of field: MQTTAsync_willOptions::struct_id"]
        [::std::mem::offset_of!(MQTTAsync_willOptions, struct_id) - 0usize];
    ["Offset of field: MQTTAsync_willOptions::struct_version"]
        [::std::mem::offset_of!(MQTTAsync_willOptions, struct_version) - 4usize];
    ["Offset of field: MQTTAsync_willOptions::topicName"]
        [::std::mem::offset_of!(MQTTAsync_willOptions, topicName) - 8usize];
    ["Offset of field: MQTTAsync_willOptions::message"]
        [::std::mem::offset_of!(MQTTAsync_willOptions, message) - 16usize];
    ["Offset of field: MQTTAsync_willOptions::retained"]
        [::std::mem::offset_of!(MQTTAsync_willOptions, retained) - 24usize];
    ["Offset of field: MQTTAsync_willOptions::qos"]
        [::std::mem::offset_of!(MQTTAsync_willOptions, qos) - 28usize];
    ["Offset of field: MQTTAsync_willOptions::payload"]
        [::std::mem::offset_of!(MQTTAsync_willOptions, payload) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_SSLOptions {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub trustStore: *const ::std::os::raw::c_char,
    pub keyStore: *const ::std::os::raw::c_char,
    pub privateKey: *const ::std::os::raw::c_char,
    pub privateKeyPassword: *const ::std::os::raw::c_char,
    pub enabledCipherSuites: *const ::std::os::raw::c_char,
    pub enableServerCertAuth: ::std::os::raw::c_int,
    pub sslVersion: ::std::os::raw::c_int,
    pub verify: ::std::os::raw::c_int,
    pub CApath: *const ::std::os::raw::c_char,
    pub ssl_error_cb: ::std::option::Option<
        unsafe extern "C" fn(
            str_: *const ::std::os::raw::c_char,
            len: usize,
            u: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub ssl_error_context: *mut ::std::os::raw::c_void,
    pub ssl_psk_cb: ::std::option::Option<
        unsafe extern "C" fn(
            hint: *const ::std::os::raw::c_char,
            identity: *mut ::std::os::raw::c_char,
            max_identity_len: ::std::os::raw::c_uint,
            psk: *mut ::std::os::raw::c_uchar,
            max_psk_len: ::std::os::raw::c_uint,
            u: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_uint,
    >,
    pub ssl_psk_context: *mut ::std::os::raw::c_void,
    pub disableDefaultTrustStore: ::std::os::raw::c_int,
    pub protos: *const ::std::os::raw::c_uchar,
    pub protos_len: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_SSLOptions"][::std::mem::size_of::<MQTTAsync_SSLOptions>() - 128usize];
    ["Alignment of MQTTAsync_SSLOptions"][::std::mem::align_of::<MQTTAsync_SSLOptions>() - 8usize];
    ["Offset of field: MQTTAsync_SSLOptions::struct_id"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, struct_id) - 0usize];
    ["Offset of field: MQTTAsync_SSLOptions::struct_version"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, struct_version) - 4usize];
    ["Offset of field: MQTTAsync_SSLOptions::trustStore"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, trustStore) - 8usize];
    ["Offset of field: MQTTAsync_SSLOptions::keyStore"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, keyStore) - 16usize];
    ["Offset of field: MQTTAsync_SSLOptions::privateKey"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, privateKey) - 24usize];
    ["Offset of field: MQTTAsync_SSLOptions::privateKeyPassword"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, privateKeyPassword) - 32usize];
    ["Offset of field: MQTTAsync_SSLOptions::enabledCipherSuites"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, enabledCipherSuites) - 40usize];
    ["Offset of field: MQTTAsync_SSLOptions::enableServerCertAuth"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, enableServerCertAuth) - 48usize];
    ["Offset of field: MQTTAsync_SSLOptions::sslVersion"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, sslVersion) - 52usize];
    ["Offset of field: MQTTAsync_SSLOptions::verify"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, verify) - 56usize];
    ["Offset of field: MQTTAsync_SSLOptions::CApath"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, CApath) - 64usize];
    ["Offset of field: MQTTAsync_SSLOptions::ssl_error_cb"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, ssl_error_cb) - 72usize];
    ["Offset of field: MQTTAsync_SSLOptions::ssl_error_context"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, ssl_error_context) - 80usize];
    ["Offset of field: MQTTAsync_SSLOptions::ssl_psk_cb"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, ssl_psk_cb) - 88usize];
    ["Offset of field: MQTTAsync_SSLOptions::ssl_psk_context"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, ssl_psk_context) - 96usize];
    ["Offset of field: MQTTAsync_SSLOptions::disableDefaultTrustStore"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, disableDefaultTrustStore) - 104usize];
    ["Offset of field: MQTTAsync_SSLOptions::protos"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, protos) - 112usize];
    ["Offset of field: MQTTAsync_SSLOptions::protos_len"]
        [::std::mem::offset_of!(MQTTAsync_SSLOptions, protos_len) - 120usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_nameValue {
    pub name: *const ::std::os::raw::c_char,
    pub value: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_nameValue"][::std::mem::size_of::<MQTTAsync_nameValue>() - 16usize];
    ["Alignment of MQTTAsync_nameValue"][::std::mem::align_of::<MQTTAsync_nameValue>() - 8usize];
    ["Offset of field: MQTTAsync_nameValue::name"]
        [::std::mem::offset_of!(MQTTAsync_nameValue, name) - 0usize];
    ["Offset of field: MQTTAsync_nameValue::value"]
        [::std::mem::offset_of!(MQTTAsync_nameValue, value) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_connectOptions {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub keepAliveInterval: ::std::os::raw::c_int,
    pub cleansession: ::std::os::raw::c_int,
    pub maxInflight: ::std::os::raw::c_int,
    pub will: *mut MQTTAsync_willOptions,
    pub username: *const ::std::os::raw::c_char,
    pub password: *const ::std::os::raw::c_char,
    pub connectTimeout: ::std::os::raw::c_int,
    pub retryInterval: ::std::os::raw::c_int,
    pub ssl: *mut MQTTAsync_SSLOptions,
    pub onSuccess: MQTTAsync_onSuccess,
    pub onFailure: MQTTAsync_onFailure,
    pub context: *mut ::std::os::raw::c_void,
    pub serverURIcount: ::std::os::raw::c_int,
    pub serverURIs: *const *mut ::std::os::raw::c_char,
    pub MQTTVersion: ::std::os::raw::c_int,
    pub automaticReconnect: ::std::os::raw::c_int,
    pub minRetryInterval: ::std::os::raw::c_int,
    pub maxRetryInterval: ::std::os::raw::c_int,
    pub binarypwd: MQTTAsync_connectOptions__bindgen_ty_1,
    pub cleanstart: ::std::os::raw::c_int,
    pub connectProperties: *mut MQTTProperties,
    pub willProperties: *mut MQTTProperties,
    pub onSuccess5: MQTTAsync_onSuccess5,
    pub onFailure5: MQTTAsync_onFailure5,
    pub httpHeaders: *const MQTTAsync_nameValue,
    pub httpProxy: *const ::std::os::raw::c_char,
    pub httpsProxy: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_connectOptions__bindgen_ty_1 {
    pub len: ::std::os::raw::c_int,
    pub data: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_connectOptions__bindgen_ty_1"]
        [::std::mem::size_of::<MQTTAsync_connectOptions__bindgen_ty_1>() - 16usize];
    ["Alignment of MQTTAsync_connectOptions__bindgen_ty_1"]
        [::std::mem::align_of::<MQTTAsync_connectOptions__bindgen_ty_1>() - 8usize];
    ["Offset of field: MQTTAsync_connectOptions__bindgen_ty_1::len"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions__bindgen_ty_1, len) - 0usize];
    ["Offset of field: MQTTAsync_connectOptions__bindgen_ty_1::data"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions__bindgen_ty_1, data) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_connectOptions"]
        [::std::mem::size_of::<MQTTAsync_connectOptions>() - 200usize];
    ["Alignment of MQTTAsync_connectOptions"]
        [::std::mem::align_of::<MQTTAsync_connectOptions>() - 8usize];
    ["Offset of field: MQTTAsync_connectOptions::struct_id"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, struct_id) - 0usize];
    ["Offset of field: MQTTAsync_connectOptions::struct_version"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, struct_version) - 4usize];
    ["Offset of field: MQTTAsync_connectOptions::keepAliveInterval"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, keepAliveInterval) - 8usize];
    ["Offset of field: MQTTAsync_connectOptions::cleansession"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, cleansession) - 12usize];
    ["Offset of field: MQTTAsync_connectOptions::maxInflight"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, maxInflight) - 16usize];
    ["Offset of field: MQTTAsync_connectOptions::will"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, will) - 24usize];
    ["Offset of field: MQTTAsync_connectOptions::username"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, username) - 32usize];
    ["Offset of field: MQTTAsync_connectOptions::password"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, password) - 40usize];
    ["Offset of field: MQTTAsync_connectOptions::connectTimeout"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, connectTimeout) - 48usize];
    ["Offset of field: MQTTAsync_connectOptions::retryInterval"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, retryInterval) - 52usize];
    ["Offset of field: MQTTAsync_connectOptions::ssl"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, ssl) - 56usize];
    ["Offset of field: MQTTAsync_connectOptions::onSuccess"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, onSuccess) - 64usize];
    ["Offset of field: MQTTAsync_connectOptions::onFailure"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, onFailure) - 72usize];
    ["Offset of field: MQTTAsync_connectOptions::context"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, context) - 80usize];
    ["Offset of field: MQTTAsync_connectOptions::serverURIcount"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, serverURIcount) - 88usize];
    ["Offset of field: MQTTAsync_connectOptions::serverURIs"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, serverURIs) - 96usize];
    ["Offset of field: MQTTAsync_connectOptions::MQTTVersion"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, MQTTVersion) - 104usize];
    ["Offset of field: MQTTAsync_connectOptions::automaticReconnect"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, automaticReconnect) - 108usize];
    ["Offset of field: MQTTAsync_connectOptions::minRetryInterval"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, minRetryInterval) - 112usize];
    ["Offset of field: MQTTAsync_connectOptions::maxRetryInterval"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, maxRetryInterval) - 116usize];
    ["Offset of field: MQTTAsync_connectOptions::binarypwd"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, binarypwd) - 120usize];
    ["Offset of field: MQTTAsync_connectOptions::cleanstart"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, cleanstart) - 136usize];
    ["Offset of field: MQTTAsync_connectOptions::connectProperties"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, connectProperties) - 144usize];
    ["Offset of field: MQTTAsync_connectOptions::willProperties"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, willProperties) - 152usize];
    ["Offset of field: MQTTAsync_connectOptions::onSuccess5"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, onSuccess5) - 160usize];
    ["Offset of field: MQTTAsync_connectOptions::onFailure5"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, onFailure5) - 168usize];
    ["Offset of field: MQTTAsync_connectOptions::httpHeaders"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, httpHeaders) - 176usize];
    ["Offset of field: MQTTAsync_connectOptions::httpProxy"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, httpProxy) - 184usize];
    ["Offset of field: MQTTAsync_connectOptions::httpsProxy"]
        [::std::mem::offset_of!(MQTTAsync_connectOptions, httpsProxy) - 192usize];
};
unsafe extern "C" {
    pub fn MQTTAsync_connect(
        handle: MQTTAsync,
        options: *const MQTTAsync_connectOptions,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MQTTAsync_disconnectOptions {
    pub struct_id: [::std::os::raw::c_char; 4usize],
    pub struct_version: ::std::os::raw::c_int,
    pub timeout: ::std::os::raw::c_int,
    pub onSuccess: MQTTAsync_onSuccess,
    pub onFailure: MQTTAsync_onFailure,
    pub context: *mut ::std::os::raw::c_void,
    pub properties: MQTTProperties,
    pub reasonCode: MQTTReasonCodes,
    pub onSuccess5: MQTTAsync_onSuccess5,
    pub onFailure5: MQTTAsync_onFailure5,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MQTTAsync_disconnectOptions"]
        [::std::mem::size_of::<MQTTAsync_disconnectOptions>() - 88usize];
    ["Alignment of MQTTAsync_disconnectOptions"]
        [::std::mem::align_of::<MQTTAsync_disconnectOptions>() - 8usize];
    ["Offset of field: MQTTAsync_disconnectOptions::struct_id"]
        [::std::mem::offset_of!(MQTTAsync_disconnectOptions, struct_id) - 0usize];
    ["Offset of field: MQTTAsync_disconnectOptions::struct_version"]
        [::std::mem::offset_of!(MQTTAsync_disconnectOptions, struct_version) - 4usize];
    ["Offset of field: MQTTAsync_disconnectOptions::timeout"]
        [::std::mem::offset_of!(MQTTAsync_disconnectOptions, timeout) - 8usize];
    ["Offset of field: MQTTAsync_disconnectOptions::onSuccess"]
        [::std::mem::offset_of!(MQTTAsync_disconnectOptions, onSuccess) - 16usize];
    ["Offset of field: MQTTAsync_disconnectOptions::onFailure"]
        [::std::mem::offset_of!(MQTTAsync_disconnectOptions, onFailure) - 24usize];
    ["Offset of field: MQTTAsync_disconnectOptions::context"]
        [::std::mem::offset_of!(MQTTAsync_disconnectOptions, context) - 32usize];
    ["Offset of field: MQTTAsync_disconnectOptions::properties"]
        [::std::mem::offset_of!(MQTTAsync_disconnectOptions, properties) - 40usize];
    ["Offset of field: MQTTAsync_disconnectOptions::reasonCode"]
        [::std::mem::offset_of!(MQTTAsync_disconnectOptions, reasonCode) - 64usize];
    ["Offset of field: MQTTAsync_disconnectOptions::onSuccess5"]
        [::std::mem::offset_of!(MQTTAsync_disconnectOptions, onSuccess5) - 72usize];
    ["Offset of field: MQTTAsync_disconnectOptions::onFailure5"]
        [::std::mem::offset_of!(MQTTAsync_disconnectOptions, onFailure5) - 80usize];
};
unsafe extern "C" {
    pub fn MQTTAsync_disconnect(
        handle: MQTTAsync,
        options: *const MQTTAsync_disconnectOptions,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_isConnected(handle: MQTTAsync) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_subscribe(
        handle: MQTTAsync,
        topic: *const ::std::os::raw::c_char,
        qos: ::std::os::raw::c_int,
        response: *mut MQTTAsync_responseOptions,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_subscribeMany(
        handle: MQTTAsync,
        count: ::std::os::raw::c_int,
        topic: *const *mut ::std::os::raw::c_char,
        qos: *const ::std::os::raw::c_int,
        response: *mut MQTTAsync_responseOptions,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_unsubscribe(
        handle: MQTTAsync,
        topic: *const ::std::os::raw::c_char,
        response: *mut MQTTAsync_responseOptions,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_unsubscribeMany(
        handle: MQTTAsync,
        count: ::std::os::raw::c_int,
        topic: *const *mut ::std::os::raw::c_char,
        response: *mut MQTTAsync_responseOptions,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_send(
        handle: MQTTAsync,
        destinationName: *const ::std::os::raw::c_char,
        payloadlen: ::std::os::raw::c_int,
        payload: *const ::std::os::raw::c_void,
        qos: ::std::os::raw::c_int,
        retained: ::std::os::raw::c_int,
        response: *mut MQTTAsync_responseOptions,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_sendMessage(
        handle: MQTTAsync,
        destinationName: *const ::std::os::raw::c_char,
        msg: *const MQTTAsync_message,
        response: *mut MQTTAsync_responseOptions,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_getPendingTokens(
        handle: MQTTAsync,
        tokens: *mut *mut MQTTAsync_token,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_isComplete(handle: MQTTAsync, token: MQTTAsync_token)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_waitForCompletion(
        handle: MQTTAsync,
        token: MQTTAsync_token,
        timeout: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MQTTAsync_freeMessage(msg: *mut *mut MQTTAsync_message);
}
unsafe extern "C" {
    pub fn MQTTAsync_free(ptr: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn MQTTAsync_malloc(size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn MQTTAsync_destroy(handle: *mut MQTTAsync);
}
pub const MQTTASYNC_TRACE_LEVELS_MQTTASYNC_TRACE_MAXIMUM: MQTTASYNC_TRACE_LEVELS = 1;
pub const MQTTASYNC_TRACE_LEVELS_MQTTASYNC_TRACE_MEDIUM: MQTTASYNC_TRACE_LEVELS = 2;
pub const MQTTASYNC_TRACE_LEVELS_MQTTASYNC_TRACE_MINIMUM: MQTTASYNC_TRACE_LEVELS = 3;
pub const MQTTASYNC_TRACE_LEVELS_MQTTASYNC_TRACE_PROTOCOL: MQTTASYNC_TRACE_LEVELS = 4;
pub const MQTTASYNC_TRACE_LEVELS_MQTTASYNC_TRACE_ERROR: MQTTASYNC_TRACE_LEVELS = 5;
pub const MQTTASYNC_TRACE_LEVELS_MQTTASYNC_TRACE_SEVERE: MQTTASYNC_TRACE_LEVELS = 6;
pub const MQTTASYNC_TRACE_LEVELS_MQTTASYNC_TRACE_FATAL: MQTTASYNC_TRACE_LEVELS = 7;
pub type MQTTASYNC_TRACE_LEVELS = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn MQTTAsync_setTraceLevel(level: MQTTASYNC_TRACE_LEVELS);
}
pub type MQTTAsync_traceCallback = ::std::option::Option<
    unsafe extern "C" fn(level: MQTTASYNC_TRACE_LEVELS, message: *mut ::std::os::raw::c_char),
>;
unsafe extern "C" {
    pub fn MQTTAsync_setTraceCallback(callback: MQTTAsync_traceCallback);
}
unsafe extern "C" {
    pub fn MQTTAsync_getVersionInfo() -> *mut MQTTAsync_nameValue;
}
unsafe extern "C" {
    pub fn MQTTAsync_strerror(code: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
